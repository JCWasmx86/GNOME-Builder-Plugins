/* Ide.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Ide", gir_namespace = "Ide", gir_version = "44", lower_case_cprefix = "ide_")]
namespace Ide {
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_action_muxer_get_type ()")]
	public sealed class ActionMuxer : GLib.Object, GLib.ActionGroup {
		[CCode (has_construct_function = false)]
		public ActionMuxer ();
		public void connect_actions (void* instance, Ide.Action actions);
		public unowned GLib.ActionGroup? get_action_group (string prefix);
		public void insert_action_group (string prefix, GLib.ActionGroup action_group);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] list_groups ();
		public void remove_action_group (string prefix);
		public void remove_all ();
		public void set_enabled (Ide.Action action, bool enabled);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_animation_get_type ()")]
	public class Animation : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected Animation ();
		public void add_property (GLib.ParamSpec pspec, GLib.Value value);
		public static uint calculate_duration (Gdk.Monitor monitor, double from_value, double to_value);
		public void start ();
		public void stop ();
		[NoAccessorMethod]
		public uint duration { construct; }
		[NoAccessorMethod]
		public Gdk.FrameClock frame_clock { construct; }
		[NoAccessorMethod]
		public Ide.AnimationMode mode { construct; }
		[NoAccessorMethod]
		public GLib.Object target { construct; }
		public signal void tick ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_application_get_type ()")]
	public sealed class Application : Adw.Application, GLib.ActionGroup, GLib.ActionMap {
		[CCode (has_construct_function = false)]
		protected Application ();
		public void add_workbench (Ide.Workbench workbench);
		public string create_cancel_action (GLib.Cancellable? cancellable = null);
		public unowned Ide.ApplicationAddin? find_addin_by_module_name (string module_name);
		[Version (since = "44")]
		public unowned Ide.Workbench? find_project_workbench (Ide.ProjectInfo project_info);
		public unowned Ide.Workbench? find_workbench_for_file (GLib.File file);
		public void foreach_workbench (GLib.Func callback);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[]? get_argv (GLib.ApplicationCommandLine cmdline);
		public bool get_command_line_handled (GLib.ApplicationCommandLine cmdline);
		public bool get_dark ();
		public unowned GLib.Menu? get_menu_by_id (string? menu_id);
		public unowned GLib.DateTime get_started_at ();
		public unowned string get_style_scheme ();
		public unowned string get_system_font_name ();
		public bool has_network ();
		public async bool install_schemes_async (GLib.File files, uint n_files, GLib.Cancellable? cancellable) throws GLib.Error;
		public async Ide.Workbench open_project_async (Ide.ProjectInfo project_info, GLib.Type workspace_type, GLib.Cancellable? cancellable) throws GLib.Error;
		public void remove_workbench (Ide.Workbench workbench);
		public void set_command_line_handled (GLib.ApplicationCommandLine cmdline, bool handled);
		public void set_style_scheme (string style_scheme);
		public void set_workspace_type (GLib.Type workspace_type);
		public string style_scheme { get; set; }
		[NoAccessorMethod]
		public Pango.FontDescription system_font { owned get; }
		public string system_font_name { get; }
		public signal bool show_help ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_binding_group_get_type ()")]
	public class BindingGroup : GLib.Object {
		[CCode (has_construct_function = false)]
		public BindingGroup ();
		public void bind (string source_property, GLib.Object target, string target_property, GLib.BindingFlags flags);
		public void bind_full (string source_property, GLib.Object target, string target_property, GLib.BindingFlags flags, GLib.BindingTransformFunc? transform_to, owned GLib.BindingTransformFunc? transform_from);
		public void bind_with_closures (string source_property, GLib.Object target, string target_property, GLib.BindingFlags flags, GLib.Closure? transform_to, GLib.Closure? transform_from);
		public unowned GLib.Object? get_source ();
		public void set_source (GLib.Object? source);
		public GLib.Object source { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_buffer_get_type ()")]
	public sealed class Buffer : GtkSource.Buffer {
		[CCode (has_construct_function = false)]
		protected Buffer ();
		public uint add_commit_funcs ([CCode (scope = "async")] Ide.BufferCommitFunc? before_insert_text, [CCode (scope = "async")] Ide.BufferCommitFunc? after_insert_text, [CCode (scope = "async")] Ide.BufferCommitFunc? before_delete_range, owned Ide.BufferCommitFunc? after_delete_range);
		public unowned Ide.BufferAddin? addin_find_by_module_name (string module_name);
		public async GLib.GenericArray<Ide.CodeAction> code_action_query_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.Bytes dup_content ();
		public string dup_title ();
		public string dup_uri ();
		public async bool format_selection_async (Ide.FormatterOptions options, GLib.Cancellable? cancellable) throws GLib.Error;
		public uint get_change_count ();
		public unowned Ide.BufferChangeMonitor? get_change_monitor ();
		public bool get_changed_on_volume ();
		public unowned string get_charset ();
		[Version (since = "44")]
		public unowned Ide.CodeActionProvider? get_code_action_provider ();
		public unowned Ide.Diagnostics? get_diagnostics ();
		public bool get_failed ();
		public unowned GLib.Error get_failure ();
		public unowned GLib.File get_file ();
		public unowned Ide.FileSettings? get_file_settings ();
		public unowned Ide.Formatter? get_formatter ();
		public bool get_highlight_diagnostics ();
		public Ide.Location get_insert_location ();
		public bool get_is_temporary ();
		public void get_iter_at_location (out Gtk.TextIter iter, Ide.Location location);
		public Ide.Location get_iter_location (Gtk.TextIter iter);
		public unowned string? get_language_id ();
		public string? get_line_text (uint line);
		public bool get_loading ();
		public GtkSource.NewlineType get_newline_type ();
		public bool get_read_only ();
		public unowned Ide.RenameProvider? get_rename_provider ();
		public void get_selection_bounds (out Gtk.TextIter insert, out Gtk.TextIter selection);
		public Ide.Range get_selection_range ();
		public Ide.BufferState get_state ();
		public unowned string? get_style_scheme_name ();
		public async Ide.Symbol get_symbol_at_location_async (Gtk.TextIter location, GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.GenericArray<Ide.SymbolResolver> get_symbol_resolvers ();
		public string get_word_at_iter (Gtk.TextIter iter);
		public Ide.Buffer hold ();
		public Ide.Context ref_context ();
		public void rehighlight ();
		public void release ();
		public void remove_commit_funcs (uint commit_funcs_handler);
		public async bool save_file_async (GLib.File? file, GLib.Cancellable? cancellable, Ide.Notification* notif) throws GLib.Error;
		public void set_change_monitor (Ide.BufferChangeMonitor? change_monitor);
		public void set_charset (string charset);
		public void set_diagnostics (Ide.Diagnostics? diagnostics);
		public void set_highlight_diagnostics (bool highlight_diagnostics);
		public void set_language_id (string language_id);
		public void set_newline_type (GtkSource.NewlineType newline_type);
		public void set_style_scheme_name (string? style_scheme_name);
		[NoAccessorMethod]
		public Ide.BufferManager buffer_manager { construct; }
		public Ide.BufferChangeMonitor change_monitor { get; set; }
		public bool changed_on_volume { get; }
		public string charset { get; set; }
		public Ide.Diagnostics diagnostics { get; set; }
		[NoAccessorMethod]
		public bool enable_addins { get; construct; }
		public bool failed { get; }
		[NoAccessorMethod]
		public GLib.File file { owned get; set; }
		public Ide.FileSettings file_settings { get; }
		[NoAccessorMethod]
		public bool has_diagnostics { get; }
		[NoAccessorMethod]
		public bool has_encoding_error { get; }
		[NoAccessorMethod]
		public bool has_symbol_resolvers { get; }
		public bool highlight_diagnostics { get; set; }
		public bool is_temporary { get; construct; }
		public string language_id { get; set; }
		public GtkSource.NewlineType newline_type { get; set; }
		public bool read_only { get; }
		public Ide.BufferState state { get; }
		public string style_scheme_name { get; set; }
		[NoAccessorMethod]
		public string title { owned get; }
		public signal void change_settled ();
		public signal void line_flags_changed ();
		public signal void loaded ();
		public signal void request_scroll_to_insert ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_buffer_change_monitor_get_type ()")]
	public class BufferChangeMonitor : Ide.Object {
		[CCode (has_construct_function = false)]
		protected BufferChangeMonitor ();
		public void emit_changed ();
		public virtual void foreach_change (uint line_begin, uint line_end, Ide.BufferChangeMonitorForeachFunc callback);
		public unowned Ide.Buffer get_buffer ();
		public virtual Ide.BufferLineChange get_change (uint line);
		[NoWrapper]
		public virtual void load (Ide.Buffer buffer);
		public virtual void reload ();
		public Ide.Buffer buffer { get; construct; }
		public signal void changed ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_buffer_manager_get_type ()")]
	public sealed class BufferManager : Ide.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected BufferManager ();
		public async bool apply_edits_async (owned GLib.GenericArray<Ide.TextEdit> edits, GLib.Cancellable? cancellable) throws GLib.Error;
		public Ide.Buffer find_buffer (GLib.File file);
		public void @foreach (Ide.BufferForeachFunc foreach_func);
		public static unowned Ide.BufferManager from_context (Ide.Context context);
		public ssize_t get_max_file_size ();
		public bool has_file (GLib.File file);
		public async Ide.Buffer load_file_async (GLib.File? file, Ide.BufferOpenFlags flags, Ide.Notification? notif, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool reload_all_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool save_all_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_max_file_size (ssize_t max_file_size);
		public int64 max_file_size { get; set; }
		public signal void buffer_loaded (Ide.Buffer buffer);
		public signal void buffer_saved (Ide.Buffer buffer);
		public signal void buffer_unloaded (Ide.Buffer buffer);
		public signal void load_buffer (Ide.Buffer object);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	[Compact]
	public class BuildLog {
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_build_manager_get_type ()")]
	public sealed class BuildManager : Ide.Object, GLib.ActionGroup, GLib.Initable {
		[CCode (has_construct_function = false)]
		protected BuildManager ();
		public async bool build_async (Ide.PipelinePhase phase, GLib.GenericArray<Ide.BuildTarget>? targets, GLib.Cancellable? cancellable) throws GLib.Error;
		public void cancel ();
		public async bool clean_async (Ide.PipelinePhase phase, GLib.Cancellable? cancellable) throws GLib.Error;
		public static unowned Ide.BuildManager from_context (Ide.Context context);
		public bool get_busy ();
		public bool get_can_build ();
		public uint get_error_count ();
		public unowned GLib.DateTime? get_last_build_time ();
		public string get_message ();
		public unowned Ide.Pipeline? get_pipeline ();
		public GLib.TimeSpan get_running_time ();
		public uint get_warning_count ();
		public void invalidate ();
		public async GLib.ListModel list_targets_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool rebuild_async (Ide.PipelinePhase phase, GLib.GenericArray<Ide.BuildTarget>? targets, GLib.Cancellable? cancellable) throws GLib.Error;
		public static Ide.BuildManager ref_from_context (Ide.Context context);
		public Ide.Pipeline? ref_pipeline ();
		public bool busy { get; }
		public bool can_build { get; }
		public uint error_count { get; }
		[NoAccessorMethod]
		public bool has_diagnostics { get; }
		public GLib.DateTime last_build_time { get; }
		public string message { owned get; }
		public Ide.Pipeline pipeline { get; }
		public int64 running_time { get; }
		public uint warning_count { get; }
		public signal void build_failed (Ide.Pipeline pipeline);
		public signal void build_finished (Ide.Pipeline pipeline);
		public signal void build_started (Ide.Pipeline pipeline);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_cached_list_model_get_type ()")]
	public sealed class CachedListModel : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		public CachedListModel (owned GLib.ListModel? model);
		public unowned GLib.ListModel? get_model ();
		public void set_model (GLib.ListModel model);
		public GLib.ListModel model { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "ide_code_index_entry_get_type ()")]
	[Compact]
	public class CodeIndexEntry {
		public Ide.CodeIndexEntry copy ();
		public void free ();
		public Ide.SymbolFlags get_flags ();
		public unowned string get_key ();
		public Ide.SymbolKind get_kind ();
		public unowned string get_name ();
		public void get_range (out uint begin_line, out uint begin_line_offset, out uint end_line, out uint end_line_offset);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "ide_code_index_entry_builder_get_type ()")]
	[Compact]
	public class CodeIndexEntryBuilder {
		[CCode (has_construct_function = false)]
		public CodeIndexEntryBuilder ();
		public Ide.CodeIndexEntry build ();
		public Ide.CodeIndexEntryBuilder copy ();
		public void free ();
		public void set_flags (Ide.SymbolFlags flags);
		public void set_key (string key);
		public void set_kind (Ide.SymbolKind kind);
		public void set_name (string name);
		public void set_range (uint begin_line, uint begin_line_offset, uint end_line, uint end_line_offset);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_compile_commands_get_type ()")]
	public sealed class CompileCommands : GLib.Object {
		[CCode (has_construct_function = false)]
		public CompileCommands ();
		public bool load (GLib.File file, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool load_async (GLib.File file, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		public string[]? lookup (GLib.File file, string system_includes, out GLib.File directory) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_config_get_type ()")]
	public abstract class Config : Ide.Object {
		[CCode (has_construct_function = false)]
		protected Config ();
		public void apply_path (Ide.SubprocessLauncher launcher);
		public unowned string? get_app_id ();
		public unowned string get_append_path ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_args_for_phase (Ide.PipelinePhase phase);
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_build_commands ();
		public unowned GLib.File? get_build_commands_dir ();
		public unowned string get_config_opts ();
		public bool get_debug ();
		public virtual string get_description ();
		public bool get_dirty ();
		public unowned string get_display_name ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_environ ();
		public unowned Ide.Environment get_environment ();
		public virtual GLib.GenericArray<Ide.Runtime> get_extensions ();
		public unowned string get_id ();
		public bool get_internal_boolean (string key);
		public int get_internal_int (string key);
		public int64 get_internal_int64 (string key);
		public unowned GLib.Object? get_internal_object (string key);
		public unowned string get_internal_string (string key);
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_internal_strv (string key);
		public Ide.BuildLocality get_locality ();
		public int get_parallelism ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_post_install_commands ();
		public unowned string get_prefix ();
		public bool get_prefix_set ();
		public unowned string get_prepend_path ();
		public bool get_ready ();
		public unowned string? get_run_opts ();
		public virtual unowned Ide.Runtime? get_runtime ();
		public unowned Ide.Environment get_runtime_environment ();
		public unowned string get_runtime_id ();
		public uint get_sequence ();
		public Ide.Toolchain? get_toolchain ();
		public unowned string? get_toolchain_id ();
		public unowned string getenv (string key);
		public void set_app_id (string app_id);
		public void set_append_path (string append_path);
		public void set_args_for_phase (Ide.PipelinePhase phase, string args);
		public void set_build_commands (string build_commands);
		public void set_build_commands_dir (GLib.File build_commands_dir);
		public void set_config_opts (string config_opts);
		public void set_debug (bool debug);
		public void set_dirty (bool dirty);
		public void set_display_name (string display_name);
		public void set_environment (Ide.Environment environment);
		public void set_internal_boolean (string key, bool value);
		public void set_internal_int (string key, int value);
		public void set_internal_int64 (string key, int64 value);
		public void set_internal_object (string key, GLib.Object? instance);
		public void set_internal_string (string key, string value);
		public void set_internal_strv (string key, string value);
		public void set_locality (Ide.BuildLocality locality);
		public void set_parallelism (int parallelism);
		public void set_post_install_commands (string post_install_commands);
		public void set_prefix (string prefix);
		public void set_prefix_set (bool prefix_set);
		public void set_prepend_path (string prepend_path);
		public void set_run_opts (string? run_opts);
		public virtual void set_runtime (Ide.Runtime runtime);
		public void set_runtime_environment (Ide.Environment environment);
		public void set_runtime_id (string runtime_id);
		public void set_toolchain (Ide.Toolchain? toolchain);
		public void set_toolchain_id (string toolchain_id);
		public void setenv (string key, string value);
		public virtual bool supports_runtime (Ide.Runtime runtime);
		public virtual GLib.File? translate_file (GLib.File file);
		public string app_id { get; set; }
		public string append_path { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] build_commands { get; set; }
		public GLib.File build_commands_dir { get; set; }
		public string config_opts { get; set; }
		public bool debug { get; set; }
		public string description { owned get; }
		public bool dirty { get; set; }
		public string display_name { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] environ { owned get; set; }
		public string id { get; construct; }
		public Ide.BuildLocality locality { get; set; }
		public int parallelism { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] post_install_commands { get; set; }
		public string prefix { get; set; }
		public bool prefix_set { get; set; }
		public string prepend_path { get; set; }
		public bool ready { get; }
		public string run_opts { get; set; }
		public Ide.Runtime runtime { get; set; }
		public string runtime_id { get; set; }
		[NoAccessorMethod]
		public GLib.ListModel supported_runtimes { owned get; }
		public Ide.Toolchain toolchain { owned get; set; }
		public string toolchain_id { get; set; }
		public signal void changed ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_config_manager_get_type ()")]
	public sealed class ConfigManager : Ide.Object, GLib.ActionGroup, GLib.AsyncInitable, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected ConfigManager ();
		public void @delete (Ide.Config config);
		public void duplicate (Ide.Config config);
		public static unowned Ide.ConfigManager from_context (Ide.Context context);
		public unowned Ide.Config? get_config (string id);
		public unowned Ide.Config get_current ();
		public unowned GLib.MenuModel get_menu ();
		public bool get_ready ();
		public Ide.Config ref_current ();
		public static Ide.ConfigManager ref_from_context (Ide.Context context);
		public async bool save_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_current (Ide.Config configuration);
		public Ide.Config current { get; set; }
		[NoAccessorMethod]
		public string current_display_name { owned get; }
		public bool ready { get; }
		public signal void invalidate ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_context_get_type ()")]
	public sealed class Context : Ide.Object {
		[CCode (has_construct_function = false)]
		public Context ();
		public GLib.File build_file (string? path);
		public string dup_project_id ();
		public string dup_title ();
		public bool has_project ();
		public unowned Ide.Object? peek_child_typed (GLib.Type type);
		public Ide.ActionMuxer ref_action_muxer ();
		public GLib.Settings ref_project_settings ();
		public Ide.Settings? ref_settings (string schema_id);
		public GLib.File ref_workdir ();
		public void register_settings (string schema_id);
		public void set_project_id (string project_id);
		public void set_title (string? title);
		public void set_workdir (GLib.File workdir);
		public void unregister_settings (string schema_id);
		[NoAccessorMethod]
		public string project_id { owned get; set; }
		[NoAccessorMethod]
		public string title { owned get; set; }
		[NoAccessorMethod]
		public GLib.File workdir { owned get; set; }
		[HasEmitter]
		public signal void log (uint level, string domain, string message);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_debug_manager_get_type ()")]
	public sealed class DebugManager : Ide.Object {
		[CCode (has_construct_function = false)]
		protected DebugManager ();
		public static unowned Ide.DebugManager from_context (Ide.Context context);
		public bool get_active ();
		public Ide.DebuggerBreakpoints get_breakpoints_for_file (GLib.File file);
		public unowned Ide.Debugger? get_debugger ();
		public bool supports_language (string? language_id);
		public bool active { get; }
		public Ide.Debugger debugger { get; }
		public signal void breakpoint_added (Ide.DebuggerBreakpoint breakpoint);
		public signal void breakpoint_reached (Ide.DebuggerBreakpoint breakpoint);
		public signal void breakpoint_removed (Ide.DebuggerBreakpoint breakpoint);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_debugger_get_type ()")]
	public abstract class Debugger : Ide.Object, GLib.ActionGroup {
		[CCode (has_construct_function = false)]
		protected Debugger ();
		public static Ide.DebuggerAddress address_parse (string string);
		public virtual async GLib.GenericArray<Ide.DebuggerInstruction> disassemble_async (Ide.DebuggerAddressRange range, GLib.Cancellable? cancellable) throws GLib.Error;
		public void emit_breakpoint_added (Ide.DebuggerBreakpoint breakpoint);
		public void emit_breakpoint_modified (Ide.DebuggerBreakpoint breakpoint);
		public void emit_breakpoint_removed (Ide.DebuggerBreakpoint breakpoint);
		public void emit_library_loaded (Ide.DebuggerLibrary library);
		public void emit_library_unloaded (Ide.DebuggerLibrary library);
		public void emit_log (Ide.DebuggerStream stream, GLib.Bytes content);
		public void emit_running ();
		public void emit_stopped (Ide.DebuggerStopReason stop_reason, Ide.DebuggerBreakpoint breakpoint);
		public void emit_thread_added (Ide.DebuggerThread thread);
		public void emit_thread_group_added (Ide.DebuggerThreadGroup thread_group);
		public void emit_thread_group_exited (Ide.DebuggerThreadGroup thread_group);
		public void emit_thread_group_removed (Ide.DebuggerThreadGroup thread_group);
		public void emit_thread_group_started (Ide.DebuggerThreadGroup thread_group);
		public void emit_thread_removed (Ide.DebuggerThread thread);
		public void emit_thread_selected (Ide.DebuggerThread thread);
		public unowned GLib.ListModel get_breakpoints ();
		public virtual bool get_can_move (Ide.DebuggerMovement movement);
		public unowned string get_display_name ();
		public bool get_is_running ();
		public unowned Ide.DebuggerThread? get_selected_thread ();
		public unowned GLib.ListModel get_thread_groups ();
		public unowned GLib.ListModel get_threads ();
		public virtual async bool insert_breakpoint_async (Ide.DebuggerBreakpoint breakpoint, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async bool interpret_async (string command, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async bool interrupt_async (Ide.DebuggerThreadGroup? thread_group, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async GLib.GenericArray<Ide.DebuggerBreakpoint> list_breakpoints_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async GLib.GenericArray<Ide.DebuggerFrame>? list_frames_async (Ide.DebuggerThread thread, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async GLib.GenericArray<Ide.DebuggerVariable> list_locals_async (Ide.DebuggerThread thread, Ide.DebuggerFrame frame, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async GLib.GenericArray<Ide.DebuggerVariable> list_params_async (Ide.DebuggerThread thread, Ide.DebuggerFrame frame, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async GLib.GenericArray<Ide.DebuggerRegister> list_registers_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned string locate_binary_at_address (Ide.DebuggerAddress address);
		public virtual async bool modify_breakpoint_async (Ide.DebuggerBreakpointChange change, Ide.DebuggerBreakpoint breakpoint, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async bool move_async (Ide.DebuggerMovement movement, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual void prepare_for_run (Ide.Pipeline pipeline, Ide.RunContext run_context);
		public virtual async bool remove_breakpoint_async (Ide.DebuggerBreakpoint breakpoint, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async bool send_signal_async (int signum, GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_display_name (string display_name);
		public virtual bool supports_run_command (Ide.Pipeline pipeline, Ide.RunCommand run_command, int priority);
		public string display_name { get; set; }
		public Ide.DebuggerThread selected_thread { get; }
		public virtual signal void breakpoint_added (Ide.DebuggerBreakpoint breakpoint);
		public virtual signal void breakpoint_modified (Ide.DebuggerBreakpoint breakpoint);
		public virtual signal void breakpoint_removed (Ide.DebuggerBreakpoint breakpoint);
		public virtual signal void library_loaded (Ide.DebuggerLibrary library);
		public virtual signal void library_unloaded (Ide.DebuggerLibrary library);
		public virtual signal void log (Ide.DebuggerStream stream, GLib.Bytes content);
		public virtual signal void running ();
		public virtual signal void stopped (Ide.DebuggerStopReason stop_reason, Ide.DebuggerBreakpoint? breakpoint);
		public virtual signal void thread_added (Ide.DebuggerThread thread);
		public virtual signal void thread_group_added (Ide.DebuggerThreadGroup thread_group);
		public virtual signal void thread_group_exited (Ide.DebuggerThreadGroup thread_group);
		public virtual signal void thread_group_removed (Ide.DebuggerThreadGroup thread_group);
		public virtual signal void thread_group_started (Ide.DebuggerThreadGroup thread_group);
		public virtual signal void thread_removed (Ide.DebuggerThread thread);
		public virtual signal void thread_selected (Ide.DebuggerThread thread);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "ide_debugger_address_range_get_type ()")]
	[Compact]
	public class DebuggerAddressRange {
		public Ide.DebuggerAddress from;
		public Ide.DebuggerAddress to;
		public Ide.DebuggerAddressRange copy ();
		public void free ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_debugger_breakpoint_get_type ()")]
	public class DebuggerBreakpoint : GLib.Object {
		[CCode (has_construct_function = false)]
		public DebuggerBreakpoint (string id);
		public int compare (Ide.DebuggerBreakpoint b);
		public Ide.DebuggerAddress get_address ();
		public int64 get_count ();
		public Ide.DebuggerDisposition get_disposition ();
		public bool get_enabled ();
		public unowned string? get_file ();
		public unowned string get_function ();
		public unowned string get_id ();
		public uint get_line ();
		public Ide.DebuggerBreakMode get_mode ();
		public unowned string? get_spec ();
		public unowned string? get_thread ();
		public void set_address (Ide.DebuggerAddress address);
		public void set_count (int64 count);
		public void set_disposition (Ide.DebuggerDisposition disposition);
		public void set_enabled (bool enabled);
		public void set_file (string? file);
		public void set_function (string? function);
		public void set_line (uint line);
		public void set_mode (Ide.DebuggerBreakMode mode);
		public void set_spec (string? spec);
		public void set_thread (string thread);
		public uint64 address { get; set; }
		public int64 count { get; set; }
		public Ide.DebuggerDisposition disposition { get; set; }
		public bool enabled { get; set; }
		public string file { get; set; }
		public string function { get; set; }
		public string id { get; construct; }
		public uint line { get; set; }
		public Ide.DebuggerBreakMode mode { get; set; }
		public string spec { get; set; }
		public string thread { get; set; }
		public virtual signal void reset ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_debugger_breakpoints_get_type ()")]
	public sealed class DebuggerBreakpoints : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DebuggerBreakpoints ();
		public void @foreach (GLib.Func func);
		public unowned GLib.File get_file ();
		public unowned Ide.DebuggerBreakpoint? get_line (uint line);
		public Ide.DebuggerBreakMode get_line_mode (uint line);
		public GLib.File file { get; construct; }
		public signal void changed ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_debugger_frame_get_type ()")]
	public class DebuggerFrame : GLib.Object {
		[CCode (has_construct_function = false)]
		public DebuggerFrame ();
		public Ide.DebuggerAddress get_address ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_args ();
		public uint get_depth ();
		public unowned string get_file ();
		public unowned string get_function ();
		public unowned string get_library ();
		public uint get_line ();
		public void set_address (Ide.DebuggerAddress address);
		public void set_args (string args);
		public void set_depth (uint depth);
		public void set_file (string file);
		public void set_function (string function);
		public void set_library (string library);
		public void set_line (uint line);
		public uint64 address { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] args { get; set; }
		public uint depth { get; set; }
		public string file { get; set; }
		public string function { get; set; }
		public string library { get; set; }
		public uint line { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_debugger_instruction_get_type ()")]
	public class DebuggerInstruction : GLib.Object {
		[CCode (has_construct_function = false)]
		public DebuggerInstruction (Ide.DebuggerAddress address);
		public Ide.DebuggerAddress get_address ();
		public unowned string get_display ();
		public unowned string get_function ();
		public void set_display (string display);
		public void set_function (string function);
		public uint64 address { get; construct; }
		public string display { get; set; }
		public string function { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_debugger_library_get_type ()")]
	public class DebuggerLibrary : GLib.Object {
		[CCode (has_construct_function = false)]
		public DebuggerLibrary (string id);
		public void add_range (Ide.DebuggerAddressRange range);
		public int compare (Ide.DebuggerLibrary b);
		public unowned string get_host_name ();
		public unowned string get_id ();
		public unowned GLib.GenericArray<Ide.DebuggerAddressRange> get_ranges ();
		public unowned string get_target_name ();
		public void set_host_name (string host_name);
		public void set_target_name (string target_name);
		public string host_name { get; set; }
		public string id { get; construct; }
		public string target_name { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_debugger_register_get_type ()")]
	public class DebuggerRegister : GLib.Object {
		[CCode (has_construct_function = false)]
		public DebuggerRegister (string id);
		public int compare (Ide.DebuggerRegister b);
		public unowned string get_id ();
		public unowned string get_name ();
		public unowned string get_value ();
		public void set_name (string name);
		public void set_value (string value);
		public string id { get; construct; }
		public string name { get; set; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_debugger_thread_get_type ()")]
	public class DebuggerThread : GLib.Object {
		[CCode (has_construct_function = false)]
		public DebuggerThread (string id);
		public int compare (Ide.DebuggerThread b);
		public unowned string get_group ();
		public unowned string get_id ();
		public void set_group (string thread_group);
		public string group { get; set; }
		public string id { get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_debugger_thread_group_get_type ()")]
	public class DebuggerThreadGroup : GLib.Object {
		[CCode (has_construct_function = false)]
		public DebuggerThreadGroup (string id);
		public int compare (Ide.DebuggerThreadGroup b);
		public unowned string get_exit_code ();
		public unowned string get_id ();
		public unowned string get_pid ();
		public void set_exit_code (string exit_code);
		public void set_pid (string pid);
		public string exit_code { get; set; }
		public string id { get; construct; }
		public string pid { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_debugger_variable_get_type ()")]
	public class DebuggerVariable : GLib.Object {
		[CCode (has_construct_function = false)]
		public DebuggerVariable (string name);
		public bool get_has_children ();
		public unowned string get_name ();
		public unowned string get_type_name ();
		public unowned string get_value ();
		public void set_has_children (bool has_children);
		public void set_type_name (string type_name);
		public void set_value (string value);
		public bool has_children { get; set; }
		public string name { get; construct; }
		public string type_name { get; set; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_deploy_strategy_get_type ()")]
	public abstract class DeployStrategy : Ide.Object {
		[CCode (has_construct_function = false)]
		protected DeployStrategy ();
		public virtual async bool deploy_async (Ide.Pipeline pipeline, [CCode (delegate_target_pos = 2.33333, destroy_notify_pos = 2.66667)] owned GLib.FileProgressCallback? progress, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async bool load_async (Ide.Pipeline pipeline, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual void prepare_run_context (Ide.Pipeline pipeline, Ide.RunContext run_context);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_device_get_type ()")]
	public abstract class Device : Ide.Object {
		[CCode (has_construct_function = false)]
		protected Device ();
		public unowned string? get_display_name ();
		public unowned string? get_icon_name ();
		public unowned string get_id ();
		public virtual async Ide.DeviceInfo get_info_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual void prepare_configuration (Ide.Config configuration);
		public void set_display_name (string display_name);
		public void set_icon_name (string icon_name);
		public void set_id (string id);
		public string display_name { get; set; }
		public string icon_name { get; set; }
		public string id { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_device_info_get_type ()")]
	public sealed class DeviceInfo : GLib.Object {
		[CCode (has_construct_function = false)]
		public DeviceInfo ();
		public unowned Ide.Triplet? get_host_triplet ();
		public Ide.DeviceKind get_kind ();
		public void set_host_triplet (Ide.Triplet host_triplet);
		public void set_kind (Ide.DeviceKind kind);
		public Ide.Triplet host_triplet { get; set; }
		public Ide.DeviceKind kind { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_device_manager_get_type ()")]
	public sealed class DeviceManager : Ide.Object, GLib.ActionGroup, GLib.AsyncInitable, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected DeviceManager ();
		public async bool deploy_async (Ide.Pipeline pipeline, GLib.Cancellable? cancellable) throws GLib.Error;
		public static unowned Ide.DeviceManager from_context (Ide.Context context);
		public unowned Ide.Device get_device ();
		public unowned Ide.Device get_device_by_id (string device_id);
		public double get_progress ();
		public void set_device (Ide.Device? device);
		public Ide.Device device { get; set; }
		public double progress { get; }
		public signal void deploy_finished ();
		public signal void deploy_started ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_device_provider_get_type ()")]
	public abstract class DeviceProvider : Ide.Object {
		[CCode (has_construct_function = false)]
		protected DeviceProvider ();
		public void emit_device_added (Ide.Device device);
		public void emit_device_removed (Ide.Device device);
		public GLib.GenericArray<Ide.Device> get_devices ();
		public virtual async bool load_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual signal void device_added (Ide.Device device);
		public virtual signal void device_removed (Ide.Device device);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_diagnostic_get_type ()")]
	public class Diagnostic : Ide.Object {
		[CCode (has_construct_function = false)]
		public Diagnostic (Ide.DiagnosticSeverity severity, string message, Ide.Location location);
		public void add_fixit (Ide.TextEdit fixit);
		public void add_range (Ide.Range range);
		public bool compare (Ide.Diagnostic b);
		public bool equal (Ide.Diagnostic b);
		[CCode (has_construct_function = false)]
		public Diagnostic.from_variant (GLib.Variant? variant);
		public unowned GLib.File? get_file ();
		public unowned Ide.TextEdit? get_fixit (uint index);
		public unowned Ide.Location? get_location ();
		public Ide.MarkedKind get_marked_kind ();
		public uint get_n_fixits ();
		public uint get_n_ranges ();
		public unowned Ide.Range? get_range (uint index);
		public Ide.DiagnosticSeverity get_severity ();
		public unowned string get_text ();
		public string get_text_for_display ();
		public uint hash ();
		public void set_marked_kind (Ide.MarkedKind marked_kind);
		public void take_fixit (owned Ide.TextEdit fixit);
		public void take_range (owned Ide.Range range);
		public GLib.Variant to_variant ();
		[NoAccessorMethod]
		public string display_text { owned get; }
		public Ide.Location location { get; construct; }
		public Ide.DiagnosticSeverity severity { get; construct; }
		public string text { get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_diagnostic_tool_get_type ()")]
	public abstract class DiagnosticTool : Ide.Object, Ide.DiagnosticProvider {
		[CCode (has_construct_function = false)]
		protected DiagnosticTool ();
		[NoWrapper]
		public virtual bool can_diagnose (GLib.File file, GLib.Bytes contents, string language_id);
		public unowned string get_bundled_program_path ();
		public unowned string get_local_program_path ();
		public unowned string get_program_name ();
		[NoWrapper]
		public virtual GLib.Bytes get_stdin_bytes (GLib.File file, GLib.Bytes contents, string language_id);
		public GLib.SubprocessFlags get_subprocess_flags ();
		[NoWrapper]
		public virtual void populate_diagnostics (Ide.Diagnostics diagnostics, GLib.File file, string stdout_buf, string stderr_buf);
		[NoWrapper]
		public virtual bool prepare_run_context (Ide.RunContext run_context, GLib.File file, GLib.Bytes contents, string language_id) throws GLib.Error;
		public void set_bundled_program_path (string path);
		public void set_local_program_path (string path);
		public void set_program_name (string program_name);
		public void set_subprocess_flags (GLib.SubprocessFlags subprocess_flags);
		public string bundled_program_path { get; set; }
		public string local_program_path { get; set; }
		public string program_name { get; set; }
		public GLib.SubprocessFlags subprocess_flags { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_diagnostics_get_type ()")]
	public class Diagnostics : Ide.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		public Diagnostics ();
		public void add (Ide.Diagnostic diagnostic);
		public void foreach_line_in_range (GLib.File file, uint begin_line, uint end_line, Ide.DiagnosticsLineCallback callback);
		[CCode (has_construct_function = false)]
		public Diagnostics.from_array (GLib.GenericArray<Ide.Diagnostic>? array);
		public unowned Ide.Diagnostic? get_diagnostic_at_line (GLib.File file, uint line);
		public GLib.GenericArray<Ide.Diagnostic>? get_diagnostics_at_line (GLib.File file, uint line);
		public bool get_has_errors ();
		public bool get_has_warnings ();
		public uint get_n_errors ();
		public uint get_n_warnings ();
		public void merge (Ide.Diagnostics other);
		public void take (Ide.Diagnostic diagnostic);
		public bool has_errors { get; }
		public bool has_warnings { get; }
		public uint n_errors { get; }
		public uint n_warnings { get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_diagnostics_manager_get_type ()")]
	public sealed class DiagnosticsManager : Ide.Object {
		[CCode (has_construct_function = false)]
		protected DiagnosticsManager ();
		public static unowned Ide.DiagnosticsManager from_context (Ide.Context context);
		public bool get_busy ();
		public Ide.Diagnostics get_diagnostics_for_file (GLib.File file);
		public uint get_sequence_for_file (GLib.File file);
		public void rediagnose (Ide.Buffer buffer);
		public bool busy { get; }
		public signal void changed ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_directory_reaper_get_type ()")]
	public class DirectoryReaper : GLib.Object {
		[CCode (has_construct_function = false)]
		public DirectoryReaper ();
		public void add_directory (GLib.File directory, GLib.TimeSpan min_age);
		public void add_file (GLib.File file, GLib.TimeSpan min_age);
		public void add_glob (GLib.File directory, string glob, GLib.TimeSpan min_age);
		public bool execute (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool execute_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public signal void remove_file (GLib.File file);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_directory_vcs_get_type ()")]
	public sealed class DirectoryVcs : Ide.Object, Ide.Vcs {
		[CCode (has_construct_function = false)]
		public DirectoryVcs (GLib.File workdir);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_doap_get_type ()")]
	public sealed class Doap : GLib.Object {
		[CCode (has_construct_function = false)]
		public Doap ();
		public static GLib.Quark error_quark ();
		public unowned string get_bug_database ();
		public unowned string get_category ();
		public unowned string get_description ();
		public unowned string get_download_page ();
		public unowned string get_homepage ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_languages ();
		public unowned GLib.List<Ide.DoapPerson> get_maintainers ();
		public unowned string get_name ();
		public unowned string get_shortdesc ();
		public bool load_from_data (string data, size_t length) throws GLib.Error;
		public bool load_from_file (GLib.File file, GLib.Cancellable? cancellable = null) throws GLib.Error;
		[NoAccessorMethod]
		public string bug_database { owned get; set; }
		[NoAccessorMethod]
		public string category { owned get; set; }
		[NoAccessorMethod]
		public string description { owned get; set; }
		[NoAccessorMethod]
		public string download_page { owned get; set; }
		[NoAccessorMethod]
		public string homepage { owned get; set; }
		[NoAccessorMethod]
		public string languages { owned get; set; }
		[NoAccessorMethod]
		public string name { owned get; set; }
		[NoAccessorMethod]
		public string shortdesc { owned get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_doap_person_get_type ()")]
	public sealed class DoapPerson : GLib.Object {
		[CCode (has_construct_function = false)]
		public DoapPerson ();
		public unowned string get_email ();
		public unowned string get_name ();
		public void set_email (string email);
		public void set_name (string name);
		public string email { get; set; }
		public string name { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_editor_page_get_type ()")]
	public class EditorPage : Ide.Page, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EditorPage (Ide.Buffer buffer);
		public unowned Ide.EditorPageAddin? addin_find_by_module_name (string module_name);
		public async bool discard_changes_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned Ide.Buffer get_buffer ();
		public unowned GLib.File get_file ();
		public unowned Ide.Gutter? get_gutter ();
		public unowned Ide.SourceView get_view ();
		public async bool save_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public void scroll_to_insert (Gtk.DirectionType dir);
		public void scroll_to_visual_position (uint line, uint column);
		public void set_gutter (Ide.Gutter gutter);
		public Ide.Buffer buffer { get; construct; }
		public Ide.Gutter gutter { get; set; }
		public Ide.SourceView view { get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_editor_workspace_get_type ()")]
	public sealed class EditorWorkspace : Ide.Workspace, GLib.ActionGroup, GLib.ActionMap, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false)]
		public EditorWorkspace (Ide.Application application);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_entry_popover_get_type ()")]
	public class EntryPopover : Gtk.Popover, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EntryPopover ();
		public unowned string get_button_text ();
		public unowned string get_message ();
		public bool get_ready ();
		public unowned string get_text ();
		public unowned string get_title ();
		public void select_all ();
		public void set_button_text (string button_text);
		public void set_message (string message);
		public void set_ready (bool ready);
		public void set_text (string text);
		public void set_title (string title);
		public string button_text { get; set; }
		public string message { get; set; }
		public bool ready { get; set; }
		public string text { get; set; }
		public string title { get; set; }
		public virtual signal void activate (string text);
		public virtual signal void changed ();
		public virtual signal bool insert_text (uint position, string chars, uint n_chars);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_enum_object_get_type ()")]
	public sealed class EnumObject : GLib.Object {
		[CCode (has_construct_function = false)]
		public EnumObject (string nick, string title, string description);
		public unowned string get_description ();
		public unowned string get_nick ();
		public unowned string get_title ();
		public string description { get; construct; }
		public string nick { get; construct; }
		public string title { get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_environment_get_type ()")]
	public sealed class Environment : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		public Environment ();
		public void append (Ide.EnvironmentVariable variable);
		public Ide.Environment copy ();
		public void copy_into (Ide.Environment dest, bool replace);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_environ ();
		public unowned string getenv (string key);
		public void remove (Ide.EnvironmentVariable variable);
		public void set_environ (string env);
		public void setenv (string key, string value);
		public signal void changed ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_environment_editor_get_type ()")]
	public sealed class EnvironmentEditor : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EnvironmentEditor ();
		public unowned Ide.Environment? get_environment ();
		public void set_environment (Ide.Environment environment);
		public Ide.Environment environment { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_environment_variable_get_type ()")]
	public sealed class EnvironmentVariable : GLib.Object {
		[CCode (has_construct_function = false)]
		public EnvironmentVariable (string key, string value);
		public unowned string get_key ();
		public unowned string get_value ();
		public void set_key (string key);
		public void set_value (string value);
		public string key { get; set; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_extension_adapter_get_type ()")]
	public sealed class ExtensionAdapter : Ide.Object {
		[CCode (has_construct_function = false)]
		public ExtensionAdapter (Ide.Object? parent, Peas.Engine? engine, GLib.Type interface_type, string key, string? value);
		public unowned Peas.Engine get_engine ();
		public unowned GLib.Object get_extension ();
		public GLib.Type get_interface_type ();
		public unowned string get_key ();
		public unowned string get_value ();
		public void set_key (string key);
		public void set_value (string value);
		public Peas.Engine engine { get; construct; }
		public GLib.Object extension { get; }
		public GLib.Type interface_type { get; construct; }
		public string key { get; set; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_extension_set_adapter_get_type ()")]
	public sealed class ExtensionSetAdapter : Ide.Object {
		[CCode (has_construct_function = false)]
		public ExtensionSetAdapter (Ide.Object parent, Peas.Engine engine, GLib.Type interface_type, string key, string value);
		public void @foreach (Ide.ExtensionSetAdapterForeachFunc foreach_func);
		public void foreach_by_priority (Ide.ExtensionSetAdapterForeachFunc foreach_func);
		public unowned Peas.Engine get_engine ();
		public unowned Peas.Extension? get_extension (Peas.PluginInfo plugin_info);
		public GLib.Type get_interface_type ();
		public unowned string get_key ();
		public uint get_n_extensions ();
		public unowned string get_value ();
		public void set_key (string key);
		public void set_value (string value);
		public Peas.Engine engine { get; construct; }
		public GLib.Type interface_type { get; construct; }
		public string key { get; set; }
		public string value { get; set; }
		public signal void extension_added (Peas.PluginInfo object, GLib.Object p0);
		public signal void extension_removed (Peas.PluginInfo object, GLib.Object p0);
		public signal void extensions_loaded ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_fallback_build_system_get_type ()")]
	public sealed class FallbackBuildSystem : Ide.Object, Ide.BuildSystem {
		[CCode (has_construct_function = false)]
		protected FallbackBuildSystem ();
		public static Ide.BuildSystem @new ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	[Compact]
	public class File {
		public static bool manager_show (GLib.File file) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_file_chooser_entry_get_type ()")]
	public sealed class FileChooserEntry : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public FileChooserEntry (string title, Gtk.FileChooserAction action);
		public unowned Gtk.Entry get_entry ();
		public GLib.File? get_file ();
		public void set_file (GLib.File file);
		[NoAccessorMethod]
		public Gtk.FileChooserAction action { get; set; }
		[NoAccessorMethod]
		public bool create_folders { get; set; }
		[NoAccessorMethod]
		public bool do_overwrite_confirmation { get; set; }
		public GLib.File file { owned get; set; }
		[NoAccessorMethod]
		public Gtk.FileFilter filter { owned get; set; }
		[NoAccessorMethod]
		public bool local_only { get; set; }
		[NoAccessorMethod]
		public int max_width_chars { get; set; }
		[NoAccessorMethod]
		public bool show_hidden { get; set; }
		[NoAccessorMethod]
		public string title { owned get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_file_search_preview_get_type ()")]
	public sealed class FileSearchPreview : Ide.SearchPreview, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "IdeSearchPreview*")]
		public FileSearchPreview (GLib.File file);
		public void scroll_to (Ide.Location location);
		[NoAccessorMethod]
		public GLib.File file { owned get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_file_settings_get_type ()")]
	public class FileSettings : Ide.Object {
		[CCode (has_construct_function = false)]
		public FileSettings (Ide.Object parent, GLib.File file, string language);
		public unowned GLib.File get_file ();
		public unowned string? get_language ();
		public bool get_settled ();
		[NoAccessorMethod]
		public bool auto_indent { get; set; }
		[NoAccessorMethod]
		public bool auto_indent_set { get; set; }
		[NoAccessorMethod]
		public string encoding { owned get; set; }
		[NoAccessorMethod]
		public bool encoding_set { get; set; }
		public GLib.File file { get; construct; }
		[NoAccessorMethod]
		public Ide.IndentStyle indent_style { get; set; }
		[NoAccessorMethod]
		public bool indent_style_set { get; set; }
		[NoAccessorMethod]
		public int indent_width { get; set; }
		[NoAccessorMethod]
		public bool indent_width_set { get; set; }
		[NoAccessorMethod]
		public bool insert_matching_brace { get; set; }
		[NoAccessorMethod]
		public bool insert_matching_brace_set { get; set; }
		[NoAccessorMethod]
		public bool insert_trailing_newline { get; set; }
		[NoAccessorMethod]
		public bool insert_trailing_newline_set { get; set; }
		public string language { get; construct; }
		[NoAccessorMethod]
		public GtkSource.NewlineType newline_type { get; set; }
		[NoAccessorMethod]
		public bool newline_type_set { get; set; }
		[NoAccessorMethod]
		public bool overwrite_braces { get; set; }
		[NoAccessorMethod]
		public bool overwrite_braces_set { get; set; }
		[NoAccessorMethod]
		public uint right_margin_position { get; set; }
		[NoAccessorMethod]
		public bool right_margin_position_set { get; set; }
		[NoAccessorMethod]
		public bool settled { get; set; }
		[NoAccessorMethod]
		public bool show_right_margin { get; set; }
		[NoAccessorMethod]
		public bool show_right_margin_set { get; set; }
		[NoAccessorMethod]
		public Ide.SpacesStyle spaces_style { get; set; }
		[NoAccessorMethod]
		public bool spaces_style_set { get; set; }
		[NoAccessorMethod]
		public uint tab_width { get; set; }
		[NoAccessorMethod]
		public bool tab_width_set { get; set; }
		[NoAccessorMethod]
		public bool trim_trailing_whitespace { get; set; }
		[NoAccessorMethod]
		public bool trim_trailing_whitespace_set { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_file_transfer_get_type ()")]
	public class FileTransfer : GLib.Object {
		[CCode (has_construct_function = false)]
		public FileTransfer ();
		public void add (GLib.File src, GLib.File dest);
		public bool execute (int io_priority, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool execute_async (int io_priority, GLib.Cancellable? cancellable) throws GLib.Error;
		public Ide.FileTransferFlags get_flags ();
		public double get_progress ();
		public void set_flags (Ide.FileTransferFlags flags);
		public Ide.FileTransferStat stat ();
		public double progress { get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_formatter_options_get_type ()")]
	public sealed class FormatterOptions : GLib.Object {
		[CCode (has_construct_function = false)]
		public FormatterOptions ();
		public bool get_insert_spaces ();
		public uint get_tab_width ();
		public void set_insert_spaces (bool insert_spaces);
		public void set_tab_width (uint tab_width);
		public bool insert_spaces { get; set; }
		public uint tab_width { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_frame_get_type ()")]
	public class Frame : Panel.Frame, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Frame ();
		public unowned Ide.FrameAddin? addin_find_by_module_name (string module_name);
		public Panel.Position get_position ();
		public bool get_use_tabbar ();
		public void set_use_tabbar (bool use_tabbar);
		public bool use_tabbar { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_fuzzy_index_get_type ()")]
	public class FuzzyIndex : GLib.Object {
		[CCode (has_construct_function = false)]
		public FuzzyIndex ();
		public GLib.Variant? get_metadata (string key);
		public unowned string get_metadata_string (string key);
		public uint32 get_metadata_uint32 (string key);
		public uint64 get_metadata_uint64 (string key);
		public bool load_file (GLib.File file, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool load_file_async (GLib.File file, GLib.Cancellable? cancellable) throws GLib.Error;
		public async GLib.ListModel query_async (string query, uint max_matches, GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_fuzzy_index_builder_get_type ()")]
	public class FuzzyIndexBuilder : GLib.Object {
		[CCode (has_construct_function = false)]
		public FuzzyIndexBuilder ();
		public bool get_case_sensitive ();
		public unowned GLib.Variant get_document (uint64 document_id);
		public uint64 insert (string key, GLib.Variant document, uint priority);
		public void set_case_sensitive (bool case_sensitive);
		public void set_metadata (string key, GLib.Variant value);
		public void set_metadata_string (string key, string value);
		public void set_metadata_uint32 (string key, uint32 value);
		public void set_metadata_uint64 (string key, uint64 value);
		public bool write (GLib.File file, int io_priority, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool write_async (GLib.File file, int io_priority, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool case_sensitive { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_fuzzy_index_cursor_get_type ()")]
	public class FuzzyIndexCursor : GLib.Object, GLib.AsyncInitable, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected FuzzyIndexCursor ();
		public unowned Ide.FuzzyIndex get_index ();
		[NoAccessorMethod]
		public bool case_sensitive { get; construct; }
		[NoAccessorMethod]
		public Ide.FuzzyIndex index { construct; }
		[NoAccessorMethod]
		public uint max_matches { get; construct; }
		[NoAccessorMethod]
		public string query { owned get; construct; }
		[NoAccessorMethod]
		public GLib.VariantDict tables { construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_fuzzy_index_match_get_type ()")]
	public class FuzzyIndexMatch : GLib.Object {
		[CCode (has_construct_function = false)]
		protected FuzzyIndexMatch ();
		public unowned GLib.Variant get_document ();
		public unowned string get_key ();
		public uint get_priority ();
		public float get_score ();
		public GLib.Variant document { get; construct; }
		public string key { get; construct; }
		public uint priority { get; construct; }
		public float score { get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", ref_function = "ide_fuzzy_mutable_index_ref", type_id = "ide_fuzzy_mutable_index_get_type ()", unref_function = "ide_fuzzy_mutable_index_unref")]
	[Compact]
	public class FuzzyMutableIndex {
		[CCode (has_construct_function = false)]
		public FuzzyMutableIndex (bool case_sensitive);
		public void begin_bulk_insert ();
		public bool contains (string key);
		public void end_bulk_insert ();
		public void insert (string key, void* value);
		public GLib.Array<Ide.FuzzyMutableIndexMatch?> match (string needle, size_t max_matches);
		public Ide.FuzzyMutableIndex @ref ();
		public void remove (string key);
		public void set_free_func (GLib.DestroyNotify free_func);
		public void unref ();
		[CCode (has_construct_function = false)]
		public FuzzyMutableIndex.with_free_func (bool case_sensitive, GLib.DestroyNotify free_func);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_gsettings_action_group_get_type ()")]
	public sealed class GSettingsActionGroup : GLib.Object, GLib.ActionGroup {
		[CCode (has_construct_function = false)]
		protected GSettingsActionGroup ();
		public static GLib.ActionGroup @new (GLib.Settings settings);
		[NoAccessorMethod]
		public GLib.Settings settings { owned get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_greeter_row_get_type ()")]
	public class GreeterRow : Gtk.ListBoxRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public GreeterRow ();
		public unowned Ide.ProjectInfo? get_project_info ();
		public string? get_search_text ();
		public bool get_selection_mode ();
		public void set_project_info (Ide.ProjectInfo project_info);
		public void set_selection_mode (bool selection_mode);
		public Ide.ProjectInfo project_info { get; set; }
		[NoAccessorMethod]
		public bool selected { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_greeter_workspace_get_type ()")]
	public sealed class GreeterWorkspace : Ide.Workspace, GLib.ActionGroup, GLib.ActionMap, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false)]
		public GreeterWorkspace (Ide.Application app);
		public void add_button (Gtk.Widget button, int priority);
		public void add_page (Gtk.Widget widget, string name, string title);
		public void add_section (Ide.GreeterSection section);
		public void begin ();
		public void end ();
		public unowned Gtk.Widget? get_page ();
		public unowned string get_page_name ();
		public unowned Gtk.Widget? get_page_named (string page_name);
		public bool get_selection_mode ();
		public void remove_page (Gtk.Widget widget);
		public void remove_section (Ide.GreeterSection section);
		public void set_page (Gtk.Widget page);
		public void set_page_name (string name);
		public void set_selection_mode (bool selection_mode);
		public bool selection_mode { get; set; }
		[HasEmitter]
		public signal bool open_project (Ide.ProjectInfo project_info);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_grid_get_type ()")]
	public class Grid : Panel.Grid, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Grid ();
		public uint count_pages ();
		public void foreach_page (Ide.PageCallback callback);
		public void get_page_position (Ide.Page page, uint column, uint row, uint depth);
		public unowned Ide.Frame make_frame (uint column, uint row);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_header_bar_get_type ()")]
	public class HeaderBar : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HeaderBar ();
		public void add (Ide.HeaderBarPosition position, int priority, Gtk.Widget widget);
		public bool get_flat ();
		public unowned string? get_menu_id ();
		public void remove (Gtk.Widget widget);
		public void set_flat (bool flat);
		public void set_menu_id (string menu_id);
		public bool flat { get; set; }
		public string menu_id { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", ref_function = "ide_heap_ref", type_id = "ide_heap_get_type ()", unref_function = "ide_heap_unref")]
	[Compact]
	public class Heap {
		public weak string data;
		public size_t len;
		[CCode (has_construct_function = false)]
		public Heap (uint element_size, [CCode (scope = "async")] GLib.CompareFunc compare_func);
		public bool extract (void* result);
		public bool extract_index (size_t index_, void* result);
		public void insert_vals (void* data, uint len);
		public Ide.Heap @ref ();
		[DestroysInstance]
		public void unref ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_highlight_engine_get_type ()")]
	public sealed class HighlightEngine : Ide.Object {
		[CCode (has_construct_function = false)]
		public HighlightEngine (Ide.Buffer buffer);
		public void advance ();
		public void clear ();
		public unowned Ide.Buffer get_buffer ();
		public unowned Ide.Highlighter get_highlighter ();
		public unowned Gtk.TextTag get_style (string style_name);
		public void invalidate (Gtk.TextIter begin, Gtk.TextIter end);
		public void pause ();
		public void rebuild ();
		public void unpause ();
		public Ide.Buffer buffer { get; construct; }
		public Ide.Highlighter highlighter { get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", ref_function = "ide_highlight_index_ref", type_id = "ide_highlight_index_get_type ()", unref_function = "ide_highlight_index_unref")]
	[Compact]
	public class HighlightIndex {
		[CCode (has_construct_function = false)]
		public HighlightIndex ();
		public void dump ();
		[CCode (has_construct_function = false)]
		public HighlightIndex.from_variant (GLib.Variant variant);
		public void insert (string word, void* tag);
		public void* lookup (string word);
		public Ide.HighlightIndex @ref ();
		public GLib.Variant to_variant ();
		public void unref ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_html_generator_get_type ()")]
	public abstract class HtmlGenerator : GLib.Object {
		[CCode (has_construct_function = false)]
		protected HtmlGenerator ();
		[CCode (has_construct_function = false)]
		HtmlGenerator.for_buffer (Gtk.TextBuffer buffer);
		public virtual async GLib.Bytes generate_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned string get_base_uri ();
		public void set_base_uri (string base_uri);
		public string base_uri { get; set; }
		[HasEmitter]
		public virtual signal void invalidate ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_install_button_get_type ()")]
	public sealed class InstallButton : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public InstallButton ();
		public unowned string get_label ();
		public void set_label (string label);
		public string label { get; set; }
		[HasEmitter]
		public signal void cancel (Ide.Notification object, GLib.Cancellable? p0 = null);
		public signal void install (Ide.Notification object, GLib.Cancellable? p0 = null);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_joined_menu_get_type ()")]
	public class JoinedMenu : GLib.MenuModel {
		[CCode (has_construct_function = false)]
		public JoinedMenu ();
		public void append_menu (GLib.MenuModel model);
		public uint get_n_joined ();
		public void prepend_menu (GLib.MenuModel model);
		public void remove_index (uint index);
		public void remove_menu (GLib.MenuModel model);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_line_change_gutter_renderer_get_type ()")]
	public sealed class LineChangeGutterRenderer : GtkSource.GutterRenderer, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		protected LineChangeGutterRenderer ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_local_device_get_type ()")]
	public class LocalDevice : Ide.Device {
		[CCode (has_construct_function = false)]
		protected LocalDevice ();
		[NoAccessorMethod]
		public Ide.Triplet triplet { owned get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_location_get_type ()")]
	public class Location : GLib.Object {
		[CCode (has_construct_function = false)]
		public Location (GLib.File file, int line, int line_offset);
		public bool compare (Ide.Location b);
		public Ide.Location dup ();
		public string? dup_title ();
		public bool equal (Ide.Location b);
		[CCode (has_construct_function = false)]
		public Location.from_variant (GLib.Variant? variant);
		public unowned GLib.File? get_file ();
		public int get_line ();
		public int get_line_offset ();
		public int get_offset ();
		public uint hash ();
		public GLib.Variant to_variant ();
		[CCode (has_construct_function = false)]
		public Location.with_offset (GLib.File file, int line, int line_offset, int offset);
		public GLib.File file { get; construct; }
		public int line { get; construct; }
		public int line_offset { get; construct; }
		public int offset { get; construct; }
		[NoAccessorMethod]
		public string title { owned get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_client_get_type ()")]
	public class LspClient : Ide.Object {
		[CCode (has_construct_function = false)]
		public LspClient (GLib.IOStream io_stream);
		public void add_language (string language_id);
		public async bool call_async (string method, GLib.Variant? @params, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool get_diagnostics_async (GLib.File file, GLib.Bytes content, string lang_id, GLib.Cancellable? cancellable, out Ide.Diagnostics? diagnostics) throws GLib.Error;
		public unowned GLib.Variant? get_initialization_options ();
		public unowned GLib.Variant? get_server_capabilities ();
		public Ide.LspTrace get_trace ();
		public async bool send_notification_async (string method, GLib.Variant? @params, GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_initialization_options (GLib.Variant? options);
		public void set_root_uri (string root_uri);
		public void set_trace (Ide.LspTrace trace);
		public void start ();
		public void stop ();
		public GLib.Variant initialization_options { get; set; }
		[NoAccessorMethod]
		public GLib.IOStream io_stream { owned get; construct; }
		[NoAccessorMethod]
		public string root_uri { owned get; set; }
		public GLib.Variant server_capabilities { get; }
		[NoAccessorMethod]
		public bool use_markdown_in_diagnostics { get; set; }
		public virtual signal void initialized ();
		public virtual signal GLib.Variant load_configuration ();
		public virtual signal void notification (string method, GLib.Variant @params);
		public virtual signal void published_diagnostics (GLib.File file, Ide.Diagnostics diagnostics);
		public virtual signal bool supports_language (string language_id);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_code_action_get_type ()")]
	public class LspCodeAction : GLib.Object, Ide.CodeAction {
		[CCode (has_construct_function = false)]
		public LspCodeAction (Ide.LspClient client, string title, string command, GLib.Variant arguments, Ide.LspWorkspaceEdit workspace_edit);
		public unowned Ide.LspClient get_client ();
		public void set_client (Ide.LspClient client);
		public Ide.LspClient client { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_code_action_provider_get_type ()")]
	public class LspCodeActionProvider : Ide.Object, Ide.CodeActionProvider {
		[CCode (has_construct_function = false)]
		protected LspCodeActionProvider ();
		public unowned Ide.LspClient get_client ();
		public unowned Ide.Diagnostics? get_diagnostics ();
		public void set_client (Ide.LspClient client);
		public Ide.LspClient client { get; set; }
		[NoAccessorMethod]
		public Ide.Diagnostics diagnostics { owned get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_completion_item_get_type ()")]
	public sealed class LspCompletionItem : GLib.Object, GtkSource.CompletionProposal {
		[CCode (has_construct_function = false)]
		public LspCompletionItem (GLib.Variant variant);
		public void display (GtkSource.CompletionCell cell, string typed_text);
		public GLib.GenericArray<Ide.TextEdit>? get_additional_text_edits (GLib.File file);
		public unowned string get_detail ();
		public unowned string get_icon_name ();
		public unowned string get_return_type ();
		public GtkSource.Snippet get_snippet ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_completion_provider_get_type ()")]
	public abstract class LspCompletionProvider : Ide.Object, GtkSource.CompletionProvider {
		[CCode (has_construct_function = false)]
		protected LspCompletionProvider ();
		public unowned Ide.LspClient? get_client ();
		[NoWrapper]
		public virtual void load ();
		public void set_client (Ide.LspClient client);
		public Ide.LspClient client { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_completion_results_get_type ()")]
	public sealed class LspCompletionResults : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		public LspCompletionResults (GLib.Variant results);
		public void refilter (string typed_text);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_diagnostic_get_type ()")]
	public class LspDiagnostic : Ide.Diagnostic {
		[CCode (has_construct_function = false)]
		public LspDiagnostic (Ide.DiagnosticSeverity severity, string message, Ide.Location location, GLib.Variant raw_value);
		public GLib.Variant? dup_raw ();
		[NoAccessorMethod]
		public GLib.Variant raw { owned get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_diagnostic_provider_get_type ()")]
	public abstract class LspDiagnosticProvider : Ide.Object, Ide.DiagnosticProvider {
		[CCode (has_construct_function = false)]
		protected LspDiagnosticProvider ();
		public unowned Ide.LspClient? get_client ();
		public void set_client (Ide.LspClient client);
		public Ide.LspClient client { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_formatter_get_type ()")]
	public class LspFormatter : Ide.Object, Ide.Formatter {
		[CCode (has_construct_function = false)]
		protected LspFormatter ();
		public unowned Ide.LspClient get_client ();
		public void set_client (Ide.LspClient client);
		public Ide.LspClient client { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_highlighter_get_type ()")]
	public class LspHighlighter : Ide.Object, Ide.Highlighter {
		[CCode (has_construct_function = false)]
		protected LspHighlighter ();
		public unowned Ide.LspClient? get_client ();
		public void set_client (Ide.LspClient client);
		public void set_kind_style (Ide.SymbolKind kind, string style);
		public Ide.LspClient client { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_hover_provider_get_type ()")]
	public abstract class LspHoverProvider : Ide.Object, GtkSource.HoverProvider {
		[CCode (has_construct_function = false)]
		protected LspHoverProvider ();
		public unowned Ide.LspClient? get_client ();
		[NoWrapper]
		public virtual void prepare ();
		public void set_client (Ide.LspClient client);
		[NoAccessorMethod]
		public string category { owned get; set; }
		public Ide.LspClient client { get; set; }
		[NoAccessorMethod]
		public int priority { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_rename_provider_get_type ()")]
	public abstract class LspRenameProvider : Ide.Object, Ide.RenameProvider {
		[CCode (has_construct_function = false)]
		protected LspRenameProvider ();
		public unowned Ide.LspClient? get_client ();
		public void set_client (Ide.LspClient client);
		[NoAccessorMethod]
		public Ide.Buffer buffer { set; }
		public Ide.LspClient client { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_search_provider_get_type ()")]
	public abstract class LspSearchProvider : Ide.Object, Ide.SearchProvider {
		[CCode (has_construct_function = false)]
		protected LspSearchProvider ();
		public unowned Ide.LspClient? get_client ();
		public void set_client (Ide.LspClient client);
		public Ide.LspClient client { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_service_get_type ()")]
	public abstract class LspService : Ide.Object {
		[CCode (has_construct_function = false)]
		protected LspService ();
		[CCode (cname = "ide_lsp_service_class_bind_client")]
		public class void bind_client (Ide.Object provider);
		[CCode (cname = "ide_lsp_service_class_bind_client_lazy")]
		public class void bind_client_lazy (Ide.Object provider);
		[NoWrapper]
		public virtual void configure_client (Ide.LspClient client);
		[NoWrapper]
		public virtual void configure_supervisor (Ide.SubprocessSupervisor supervisor);
		public bool get_inherit_stderr ();
		public unowned string get_program ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_search_path ();
		[NoWrapper]
		public virtual void prepare_run_context (Ide.Pipeline pipeline, Ide.RunContext run_context);
		public void restart ();
		public void set_inherit_stderr (bool inherit_stderr);
		public void set_program (string program);
		public void set_search_path ([CCode (array_length = false, array_null_terminated = true)] string[]? search_path);
		[NoAccessorMethod]
		public Ide.LspClient client { owned get; }
		public bool inherit_stderr { get; set; }
		public string program { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] search_path { get; set; }
		[NoAccessorMethod]
		public Ide.LspClient supervisor { owned get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_symbol_node_get_type ()")]
	public sealed class LspSymbolNode : Ide.SymbolNode {
		[CCode (has_construct_function = false)]
		protected LspSymbolNode ();
		public unowned string get_parent_name ();
		public bool is_parent_of (Ide.LspSymbolNode other);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_symbol_resolver_get_type ()")]
	public abstract class LspSymbolResolver : Ide.Object, Ide.SymbolResolver {
		[CCode (has_construct_function = false)]
		protected LspSymbolResolver ();
		public unowned Ide.LspClient? get_client ();
		public void set_client (Ide.LspClient client);
		public Ide.LspClient client { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_symbol_tree_get_type ()")]
	public sealed class LspSymbolTree : GLib.Object, Ide.SymbolTree {
		[CCode (has_construct_function = false)]
		protected LspSymbolTree ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_lsp_workspace_edit_get_type ()")]
	public sealed class LspWorkspaceEdit : GLib.Object {
		[CCode (has_construct_function = false)]
		public LspWorkspaceEdit (GLib.Variant variant);
		public GLib.GenericArray<Ide.TextEdit> get_edits ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", ref_function = "ide_marked_content_ref", type_id = "ide_marked_content_get_type ()", unref_function = "ide_marked_content_unref")]
	[Compact]
	public class MarkedContent {
		[CCode (has_construct_function = false)]
		public MarkedContent (GLib.Bytes content, Ide.MarkedKind kind);
		public unowned string? as_string (out size_t len);
		[CCode (has_construct_function = false)]
		public MarkedContent.from_data (string data, ssize_t len, Ide.MarkedKind kind);
		public unowned GLib.Bytes get_bytes ();
		public Ide.MarkedKind get_kind ();
		[CCode (has_construct_function = false)]
		public MarkedContent.plaintext (string? plaintext);
		public Ide.MarkedContent @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_marked_view_get_type ()")]
	public sealed class MarkedView : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MarkedView (Ide.MarkedContent content);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_menu_manager_get_type ()")]
	public class MenuManager : GLib.Object {
		[CCode (has_construct_function = false)]
		public MenuManager ();
		public uint add_filename (string filename) throws GLib.Error;
		public uint add_resource (string resource) throws GLib.Error;
		public unowned GLib.Menu get_menu_by_id (string menu_id);
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_menu_ids ();
		public uint merge (string menu_id, GLib.MenuModel model);
		public void remove (uint merge_id);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_notification_get_type ()")]
	public class Notification : Ide.Object {
		[CCode (has_construct_function = false)]
		public Notification ();
		public void add_button (string label, GLib.Icon? icon, string detailed_action);
		public void add_button_with_target_value (string label, GLib.Icon? icon, string action, GLib.Variant? target);
		public void attach (Ide.Object object);
		public int compare (Ide.Notification b);
		public string dup_body ();
		public string dup_id ();
		public string dup_title ();
		public static void file_progress_callback (int64 current_num_bytes, int64 total_num_bytes, void* user_data);
		public static void flatpak_progress_callback (string status, uint notification, bool estimating, void* user_data);
		public bool get_button (uint button, out string label, out GLib.Icon icon, out string action, out GLib.Variant target);
		public bool get_default_action (string action, GLib.Variant target);
		public bool get_has_progress ();
		public uint get_n_buttons ();
		public int get_priority ();
		public double get_progress ();
		public bool get_progress_is_imprecise ();
		public bool get_urgent ();
		public GLib.Icon? ref_icon ();
		public void set_body (string? body);
		public void set_default_action (string detailed_action);
		public void set_default_action_and_target_value (string action, GLib.Variant target);
		public void set_has_progress (bool has_progress);
		public void set_icon (GLib.Icon icon);
		public void set_icon_name (string icon_name);
		public void set_id (string? id);
		public void set_priority (int priority);
		public void set_progress (double progress);
		public void set_progress_is_imprecise (bool progress_is_imprecise);
		public void set_title (string? title);
		public void set_urgent (bool urgent);
		public void withdraw ();
		public void withdraw_in_seconds (int seconds);
		[NoAccessorMethod]
		public string body { owned get; set; }
		public bool has_progress { get; set; }
		[NoAccessorMethod]
		public GLib.Icon icon { owned get; set; }
		public string icon_name { set; }
		[NoAccessorMethod]
		public string id { owned get; set; }
		public int priority { get; set; }
		public double progress { get; set; }
		public bool progress_is_imprecise { get; set; }
		[NoAccessorMethod]
		public string title { owned get; set; }
		public bool urgent { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_notifications_get_type ()")]
	public sealed class Notifications : Ide.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		public Notifications ();
		public void add_notification (Ide.Notification notification);
		public Ide.Notification? find_by_id (string id);
		public bool get_has_progress ();
		public double get_progress ();
		public bool get_progress_is_imprecise ();
		public bool has_progress { get; }
		public double progress { get; }
		public bool progress_is_imprecise { get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_notifications_button_get_type ()")]
	public sealed class NotificationsButton : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public NotificationsButton ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_object_get_type ()")]
	public class Object : GLib.Object {
		[CCode (has_construct_function = false, type = "gpointer")]
		public Object (GLib.Type type, Ide.Object? parent);
		public virtual void add (Ide.Object? sibling, Ide.Object child, Ide.ObjectLocation location);
		public void append (Ide.Object child);
		public bool check_ready () throws GLib.Error;
		public void destroyed ();
		public Ide.Object? ensure_child_typed (GLib.Type type);
		public void @foreach (GLib.Func callback);
		public Ide.Object? get_child_typed (GLib.Type type);
		public GLib.GenericArray<Ide.Object> get_children_typed (GLib.Type type);
		public unowned Ide.Context? get_context ();
		public uint get_n_children ();
		public Ide.Object? get_nth_child (uint nth);
		public unowned Ide.Object? get_parent ();
		public uint get_position ();
		public bool in_destruction ();
		public void insert_after (Ide.Object sibling, Ide.Object child);
		public void insert_before (Ide.Object sibling, Ide.Object child);
		public void insert_sorted (Ide.Object child, GLib.CompareDataFunc func);
		public bool is_root ();
		public void @lock ();
		public static void notify_by_pspec (void* instance, GLib.ParamSpec pspec);
		public static void notify_in_main (GLib.Object instance, GLib.ParamSpec pspec);
		[NoWrapper]
		public virtual void parent_set (Ide.Object parent);
		public void prepend (Ide.Object child);
		public unowned GLib.Cancellable ref_cancellable ();
		public Ide.Context? ref_context ();
		public Ide.Object? ref_parent ();
		public Ide.Object ref_root ();
		public virtual void remove (Ide.Object child);
		public virtual string repr ();
		public void set_context (Ide.Context context);
		public bool set_error_if_destroyed () throws GLib.Error;
		public void @unlock ();
		[NoAccessorMethod]
		public GLib.Cancellable cancellable { owned get; construct; }
		public Ide.Object parent { get; construct; }
		[HasEmitter]
		public virtual signal void destroy ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_object_box_get_type ()")]
	public sealed class ObjectBox : Ide.Object {
		[CCode (has_construct_function = false)]
		public ObjectBox (GLib.Object object);
		public bool contains (GLib.Object? instance);
		public static unowned Ide.ObjectBox from_object (GLib.Object object);
		public GLib.Object? ref_object ();
		[NoAccessorMethod]
		public GLib.Object object { owned get; construct; }
		[NoAccessorMethod]
		public bool propagate_disposal { get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_omni_bar_get_type ()")]
	public sealed class OmniBar : Panel.OmniBar, GLib.ActionGroup, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public OmniBar ();
		public void add_popover_section (Gtk.Widget widget, int priority);
		public void add_status_icon (Gtk.Widget widget, int priority);
		public void set_placeholder (Gtk.Widget placeholder);
		[NoAccessorMethod]
		public string menu_id { set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_page_get_type ()")]
	public abstract class Page : Panel.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		protected Page ();
		public void add_content_widget (Gtk.Widget widget);
		public virtual async bool agree_to_close_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public void destroy ();
		public bool get_can_split ();
		public bool get_failed ();
		public virtual GLib.File? get_file_or_directory ();
		public unowned string get_menu_id ();
		public Panel.Position? get_position ();
		public void mark_used ();
		public void observe (Ide.Page location);
		public void set_can_split (bool can_split);
		public void set_failed (bool failed);
		public void set_menu_id (string menu_id);
		public void set_progress (Ide.Notification? notification);
		public void unobserve (Ide.Page location);
		public bool can_split { get; set; }
		public bool failed { get; set; }
		public string menu_id { get; set; }
		[HasEmitter]
		public virtual signal Ide.Page create_split ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_pane_get_type ()")]
	public class Pane : Panel.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Pane ();
		public void destroy ();
		public Panel.Position? get_position ();
		public void observe (Ide.Pane location);
		public void unobserve (Ide.Pane location);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_path_cache_get_type ()")]
	public sealed class PathCache : GLib.Object {
		[CCode (has_construct_function = false)]
		public PathCache ();
		public bool contains (string program_name, out bool had_program_path);
		public void insert (string program_name, string? program_path);
		public bool lookup (string program_name, out string? program_path);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", ref_function = "ide_pattern_spec_ref", type_id = "ide_pattern_spec_get_type ()", unref_function = "ide_pattern_spec_unref")]
	[Compact]
	public class PatternSpec {
		[CCode (has_construct_function = false)]
		public PatternSpec (string keywords);
		public unowned string get_text ();
		public bool match (string haystack);
		public Ide.PatternSpec @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_persistent_map_get_type ()")]
	public sealed class PersistentMap : GLib.Object {
		[CCode (has_construct_function = false)]
		public PersistentMap ();
		public int64 builder_get_metadata_int64 (string key);
		public bool load_file (GLib.File file, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool load_file_async (GLib.File file, GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.Variant lookup_value (string key);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_persistent_map_builder_get_type ()")]
	public sealed class PersistentMapBuilder : GLib.Object {
		[CCode (has_construct_function = false)]
		public PersistentMapBuilder ();
		public void insert (string key, GLib.Variant value, bool replace);
		public void set_metadata_int64 (string key, int64 value);
		public bool write (GLib.File destination, int io_priority, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool write_async (GLib.File destination, int io_priority, GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_pipeline_get_type ()")]
	public sealed class Pipeline : Ide.Object, GLib.Initable, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected Pipeline ();
		public uint add_error_format (string regex, GLib.RegexCompileFlags flags);
		public uint add_log_observer (owned Ide.BuildLogObserver observer);
		public unowned Ide.PipelineAddin? addin_find_by_module_name (string module_name);
		public uint attach (Ide.PipelinePhase phase, int priority, Ide.PipelineStage stage);
		public uint attach_command (Ide.PipelinePhase phase, int priority, Ide.RunCommand run_command);
		public uint attach_launcher (Ide.PipelinePhase phase, int priority, Ide.SubprocessLauncher launcher);
		public void attach_pty (Ide.SubprocessLauncher launcher);
		public async bool build_async (Ide.PipelinePhase phase, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool build_targets_async (Ide.PipelinePhase phase, GLib.GenericArray<Ide.BuildTarget>? targets, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool clean_async (Ide.PipelinePhase phase, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool contains_program_in_path (string name, GLib.Cancellable? cancellable = null);
		public Ide.SubprocessLauncher create_launcher () throws GLib.Error;
		public Ide.RunContext create_run_context (Ide.RunCommand run_command);
		public void detach (uint stage_id);
		public void emit_diagnostic (Ide.Diagnostic diagnostic);
		public void foreach_stage (GLib.Func stage_callback);
		public string get_arch ();
		public unowned string get_builddir ();
		public bool get_busy ();
		public bool get_can_export ();
		public unowned Ide.Config get_config ();
		public unowned Ide.DeployStrategy? get_deploy_strategy ();
		public unowned Ide.Device get_device ();
		public unowned Ide.DeviceInfo? get_device_info ();
		public unowned Ide.Triplet get_host_triplet ();
		public string? get_message ();
		public Ide.PipelinePhase get_phase ();
		public unowned Vte.Pty? get_pty ();
		public Ide.PipelinePhase get_requested_phase ();
		public unowned Ide.Runtime? get_runtime ();
		public unowned string get_srcdir ();
		public unowned Ide.PipelineStage? get_stage_by_id (uint stage_id);
		public unowned Ide.Toolchain get_toolchain ();
		public bool has_configured ();
		public void invalidate_phase (Ide.PipelinePhase phases);
		public bool is_native ();
		public bool is_ready ();
		public void prepare_run_context (Ide.RunContext run_context);
		public async bool rebuild_async (Ide.PipelinePhase phase, GLib.GenericArray<Ide.BuildTarget>? targets, GLib.Cancellable? cancellable) throws GLib.Error;
		public Ide.Toolchain? ref_toolchain ();
		public bool remove_error_format (uint error_format_id);
		public bool remove_log_observer (uint observer_id);
		public bool request_phase (Ide.PipelinePhase phase);
		[NoAccessorMethod]
		public bool busy { get; set; }
		public Ide.Config config { get; construct; }
		public Ide.Device device { get; construct; }
		public string message { owned get; }
		public Ide.PipelinePhase phase { get; }
		public Vte.Pty pty { get; }
		public signal void diagnostic (Ide.Diagnostic diagnostic);
		public signal void finished (bool failed);
		public signal void launcher_created (Ide.SubprocessLauncher launcher);
		public signal void loaded ();
		public signal void started (Ide.PipelinePhase phase);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_pipeline_stage_get_type ()")]
	public class PipelineStage : Ide.Object {
		[CCode (has_construct_function = false)]
		protected PipelineStage ();
		[NoWrapper]
		public virtual bool build (Ide.Pipeline pipeline, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public virtual async bool build_async (Ide.Pipeline pipeline, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async bool clean_async (Ide.Pipeline pipeline, GLib.Cancellable? cancellable) throws GLib.Error;
		public void emit_reap (Ide.DirectoryReaper reaper);
		public bool get_active ();
		public bool get_check_stdout ();
		public bool get_completed ();
		public bool get_disabled ();
		public unowned string get_name ();
		public unowned string get_stdout_path ();
		public bool get_transient ();
		public void log (Ide.BuildLogStream stream, string message, ssize_t message_len);
		public void log_subprocess (Ide.Subprocess subprocess);
		public void pause ();
		public void set_active (bool active);
		public void set_check_stdout (bool check_stdout);
		public void set_completed (bool completed);
		public void set_disabled (bool disabled);
		public void set_log_observer (owned Ide.BuildLogObserver observer);
		public void set_name (string name);
		public void set_stdout_path (string path);
		public void set_transient (bool transient);
		public void unpause ();
		public bool active { get; set; }
		public bool check_stdout { get; set; }
		public bool completed { get; set; }
		public bool disabled { get; set; }
		public string name { get; set; }
		public string stdout_path { get; set; }
		public bool transient { get; set; }
		[HasEmitter]
		public virtual signal bool chain (Ide.PipelineStage next);
		public signal void query (Ide.Pipeline pipeline, GLib.GenericArray<Ide.BuildTarget>? targets, GLib.Cancellable? cancellable = null);
		public virtual signal void reap (Ide.DirectoryReaper reaper);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_pipeline_stage_command_get_type ()")]
	public class PipelineStageCommand : Ide.PipelineStage {
		[CCode (has_construct_function = false, type = "IdePipelineStage*")]
		public PipelineStageCommand (Ide.RunCommand build_command, Ide.RunCommand clean_command);
		public void set_build_command (Ide.RunCommand build_command);
		public void set_clean_command (Ide.RunCommand clean_command);
		[NoAccessorMethod]
		public Ide.RunCommand build_command { owned get; set; }
		[NoAccessorMethod]
		public Ide.RunCommand clean_command { owned get; set; }
		[NoAccessorMethod]
		public bool ignore_exit_status { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_pipeline_stage_launcher_get_type ()")]
	public class PipelineStageLauncher : Ide.PipelineStage {
		[CCode (has_construct_function = false, type = "IdePipelineStage*")]
		public PipelineStageLauncher (Ide.Context context, Ide.SubprocessLauncher? launcher);
		public unowned Ide.SubprocessLauncher? get_clean_launcher ();
		public bool get_ignore_exit_status ();
		public unowned Ide.SubprocessLauncher get_launcher ();
		public bool get_use_pty ();
		public void set_clean_launcher (Ide.SubprocessLauncher clean_launcher);
		public void set_ignore_exit_status (bool ignore_exit_status);
		public void set_launcher (Ide.SubprocessLauncher launcher);
		public void set_use_pty (bool use_pty);
		public Ide.SubprocessLauncher clean_launcher { get; set; }
		public bool ignore_exit_status { get; set; }
		public Ide.SubprocessLauncher launcher { get; set; }
		public bool use_pty { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_pipeline_stage_mkdirs_get_type ()")]
	public class PipelineStageMkdirs : Ide.PipelineStage {
		[CCode (has_construct_function = false, type = "IdePipelineStage*")]
		public PipelineStageMkdirs (Ide.Context context);
		public void add_path (string path, bool with_parents, int mode, bool remove_on_rebuild);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_pipeline_stage_transfer_get_type ()")]
	public sealed class PipelineStageTransfer : Ide.PipelineStage {
		[CCode (has_construct_function = false)]
		public PipelineStageTransfer (Ide.Context context, Ide.Transfer transfer);
		[NoAccessorMethod]
		public bool disable_when_metered { get; set; }
		[NoAccessorMethod]
		public Ide.Transfer transfer { owned get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_pkcon_transfer_get_type ()")]
	public sealed class PkconTransfer : Ide.Transfer {
		[CCode (has_construct_function = false)]
		public PkconTransfer (string packages);
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] packages { owned get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_plugin_get_type ()")]
	public sealed class Plugin : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Plugin ();
		public unowned string get_category ();
		public unowned string get_category_id ();
		public unowned string get_description ();
		public unowned string get_id ();
		public unowned Peas.PluginInfo get_info ();
		public unowned string get_name ();
		public unowned string get_section ();
		[NoAccessorMethod]
		public string authors { owned get; }
		public string category { get; }
		public string category_id { get; }
		[NoAccessorMethod]
		public string copyright { owned get; }
		public string description { get; }
		public string id { get; }
		public Peas.PluginInfo info { get; construct; }
		public string name { get; }
		public string section { get; }
		[NoAccessorMethod]
		public string version { owned get; }
		[NoAccessorMethod]
		public string website { owned get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_plugin_section_get_type ()")]
	public sealed class PluginSection : GLib.Object {
		[CCode (has_construct_function = false)]
		protected PluginSection ();
		public unowned string get_id ();
		public unowned GLib.ListModel get_plugins ();
		public string id { get; construct; }
		public GLib.ListModel plugins { get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_primary_workspace_get_type ()")]
	public sealed class PrimaryWorkspace : Ide.Workspace, GLib.ActionGroup, GLib.ActionMap, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false)]
		protected PrimaryWorkspace ();
		public unowned Ide.OmniBar get_omni_bar ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_progress_icon_get_type ()")]
	public class ProgressIcon : Gtk.DrawingArea, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ProgressIcon ();
		public double get_progress ();
		public void set_progress (double progress);
		public double progress { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_project_get_type ()")]
	public sealed class Project : Ide.Object {
		[CCode (has_construct_function = false)]
		protected Project ();
		public static unowned Ide.Project from_context (Ide.Context context);
		public async GLib.ListModel list_similar_async (GLib.File file, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool rename_file_async (GLib.File orig_file, GLib.File new_file, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool trash_file_async (GLib.File file, GLib.Cancellable? cancellable) throws GLib.Error;
		public signal void file_renamed (GLib.File object, GLib.File p0);
		public signal void file_trashed (GLib.File object);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_project_file_get_type ()")]
	public class ProjectFile : Ide.Object {
		[CCode (has_construct_function = false)]
		public ProjectFile (GLib.File directory, GLib.FileInfo info);
		public int compare (Ide.ProjectFile b);
		public int compare_directories_first (Ide.ProjectFile b);
		public Ide.ProjectFile create_child (GLib.FileInfo info);
		public unowned GLib.File get_directory ();
		public unowned string get_display_name ();
		public unowned GLib.FileInfo get_info ();
		public unowned string get_name ();
		public unowned GLib.Icon? get_symbolic_icon ();
		public bool is_directory ();
		public bool is_symlink ();
		public async GLib.GenericArray<Ide.ProjectFile> list_children_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.File ref_file ();
		public async bool trash_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.File directory { get; construct; }
		[NoAccessorMethod]
		public GLib.File file { owned get; }
		public GLib.FileInfo info { get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_project_info_get_type ()")]
	public sealed class ProjectInfo : GLib.Object {
		[CCode (has_construct_function = false)]
		public ProjectInfo ();
		public int compare (Ide.ProjectInfo info2);
		public bool equal (Ide.ProjectInfo other);
		public unowned string get_build_system_hint ();
		public unowned string get_build_system_name ();
		public unowned string get_description ();
		public unowned GLib.File? get_directory ();
		public unowned Ide.Doap? get_doap ();
		public unowned GLib.File? get_file ();
		public unowned GLib.Icon? get_icon ();
		public unowned string get_id ();
		public bool get_is_recent ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_languages ();
		public unowned GLib.DateTime? get_last_modified_at ();
		public unowned string get_name ();
		public int get_priority ();
		public unowned string? get_vcs_uri ();
		public void set_build_system_hint (string build_system_hint);
		public void set_build_system_name (string build_system_name);
		public void set_description (string description);
		public void set_directory (GLib.File directory);
		public void set_doap (Ide.Doap doap);
		public void set_file (GLib.File file);
		public void set_icon (GLib.Icon icon);
		public void set_icon_name (string icon_name);
		public void set_id (string id);
		public void set_is_recent (bool is_recent);
		public void set_languages (string languages);
		public void set_last_modified_at (GLib.DateTime modified_at);
		public void set_name (string name);
		public void set_priority (int priority);
		public void set_vcs_uri (string vcs_uri);
		public string build_system_hint { get; set; }
		public string build_system_name { get; set; }
		public string description { get; set; }
		public GLib.File directory { get; set; }
		public Ide.Doap doap { get; set; }
		public GLib.File file { get; set; }
		public GLib.Icon icon { get; set; }
		public string icon_name { set; }
		public string id { get; set; }
		public bool is_recent { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] languages { get; set; }
		public GLib.DateTime last_modified_at { get; set; }
		public string name { get; set; }
		public int priority { get; set; }
		public string vcs_uri { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_project_template_get_type ()")]
	public abstract class ProjectTemplate : Ide.TemplateBase {
		[CCode (has_construct_function = false)]
		protected ProjectTemplate ();
		public int compare (Ide.ProjectTemplate b);
		public virtual async bool expand_async (Ide.TemplateInput input, Template.Scope scope, GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned string get_description ();
		public unowned string get_id ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[]? get_languages ();
		public unowned string get_name ();
		public int get_priority ();
		public virtual bool validate_app_id (string app_id);
		public virtual bool validate_name (string name);
		public string description { get; construct; }
		public string id { get; construct; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] languages { get; construct; }
		public string name { get; construct; }
		public int priority { get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_property_action_group_get_type ()")]
	public sealed class PropertyActionGroup : GLib.Object, GLib.ActionGroup {
		[CCode (has_construct_function = false)]
		public PropertyActionGroup (GLib.Type item_type);
		public void add (string action_name, string property_name);
		public void add_all ();
		public void add_string (string action_name, string property_name, bool treat_null_as_empty);
		public void* dup_item ();
		public GLib.Type get_item_type ();
		public void set_item (void* item);
		[NoAccessorMethod]
		public GLib.Object item { owned get; set; }
		public GLib.Type item_type { get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_radio_box_get_type ()")]
	public sealed class RadioBox : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioBox ();
		public void add_item (string id, string text);
		public unowned string get_active_id ();
		public void remove_item (string id);
		public void set_active_id (string id);
		public string active_id { get; set; }
		[NoAccessorMethod]
		public bool has_more { get; }
		[NoAccessorMethod]
		public bool show_more { get; set; }
		public signal void changed ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_range_get_type ()")]
	public class Range : GLib.Object {
		[CCode (has_construct_function = false)]
		public Range (Ide.Location begin, Ide.Location end);
		[CCode (has_construct_function = false)]
		public Range.from_variant (GLib.Variant variant);
		public unowned Ide.Location get_begin ();
		public unowned Ide.Location get_end ();
		public GLib.Variant to_variant ();
		public Ide.Location begin { get; construct; }
		public Ide.Location end { get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_recent_projects_get_type ()")]
	public sealed class RecentProjects : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		public RecentProjects ();
		public string find_by_directory (string directory);
		public static unowned Ide.RecentProjects get_default ();
		public void invalidate ();
		public void remove (GLib.List<Ide.ProjectInfo> project_infos);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_recursive_file_monitor_get_type ()")]
	public class RecursiveFileMonitor : GLib.Object {
		[CCode (has_construct_function = false)]
		public RecursiveFileMonitor (GLib.File root);
		public void cancel ();
		public unowned GLib.File get_root ();
		public void set_ignore_func (owned Ide.RecursiveIgnoreFunc ignore_func);
		public async bool start_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.File root { get; construct; }
		public signal void changed (GLib.File file, GLib.File? other_file, GLib.FileMonitorEvent event);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_run_button_get_type ()")]
	public sealed class RunButton : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RunButton ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_run_command_get_type ()")]
	public class RunCommand : GLib.Object {
		[CCode (has_construct_function = false)]
		public RunCommand ();
		public void append_args (string args);
		public void append_argv (string arg);
		public bool append_parsed (string args) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_argv ();
		public bool get_can_default ();
		public unowned string get_cwd ();
		public unowned string get_display_name ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_environ ();
		public unowned string get_id ();
		public Ide.RunCommandKind get_kind ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_languages ();
		public int get_priority ();
		public unowned string getenv (string key);
		public virtual void prepare_to_run (Ide.RunContext run_context, Ide.Context context);
		public void set_argv ([CCode (array_length = false, array_null_terminated = true)] string[] argv);
		public void set_can_default (bool can_default);
		public void set_cwd (string cwd);
		public void set_display_name (string display_name);
		public void set_environ (string environ);
		public void set_id (string id);
		public void set_kind (Ide.RunCommandKind kind);
		public void set_languages (string languages);
		public void set_priority (int priority);
		public void setenv (string key, string value);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] argv { get; set; }
		public bool can_default { get; set; }
		[NoAccessorMethod]
		public string category { owned get; }
		public string cwd { get; set; }
		public string display_name { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] environ { get; set; }
		[NoAccessorMethod]
		public bool has_category { get; }
		public string id { get; set; }
		public Ide.RunCommandKind kind { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] languages { get; set; }
		public int priority { get; set; }
		[NoAccessorMethod]
		public string shell_command { owned get; }
		[NoAccessorMethod]
		public string title { owned get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_run_commands_get_type ()")]
	public sealed class RunCommands : Ide.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected RunCommands ();
		public Ide.RunCommand? dup_by_id (string? id);
		public static unowned Ide.RunCommands from_context (Ide.Context context);
		public GLib.ListModel list_by_kind (Ide.RunCommandKind kind);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_run_context_get_type ()")]
	public sealed class RunContext : GLib.Object {
		[CCode (has_construct_function = false)]
		public RunContext ();
		public void add_environ (string environ);
		public void add_minimal_environment ();
		public void append_args ([CCode (array_length = false, array_null_terminated = true)] string[] args);
		public bool append_args_parsed (string args) throws GLib.Error;
		public void append_argv (string arg);
		public GLib.IOStream create_stdio_stream () throws GLib.Error;
		public Ide.SubprocessLauncher end () throws GLib.Error;
		public void environ_to_argv ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_argv ();
		public unowned string get_cwd ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_environ ();
		public unowned string getenv (string key);
		public bool merge_unix_fd_map (Ide.UnixFDMap unix_fd_map) throws GLib.Error;
		public void prepend_args (string args);
		public void prepend_argv (string arg);
		public void push (owned Ide.RunContextHandler handler);
		public void push_at_base (owned Ide.RunContextHandler handler);
		public void push_error (owned GLib.Error error);
		public void push_expansion (string environ);
		public void push_host ();
		public void push_shell (bool login);
		public void set_argv (string argv);
		public void set_cwd (string cwd);
		public void set_environ (string environ);
		public void set_pty (Vte.Pty pty);
		public void set_pty_fd (int consumer_fd);
		public void setenv (string key, string value);
		public Ide.Subprocess spawn () throws GLib.Error;
		public void take_fd (int source_fd, int dest_fd);
		public void unsetenv (string key);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_run_manager_get_type ()")]
	public sealed class RunManager : Ide.Object, GLib.ActionGroup, GLib.Initable {
		[CCode (has_construct_function = false)]
		protected RunManager ();
		public void cancel ();
		public async Ide.RunCommand discover_run_command_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public static unowned Ide.RunManager from_context (Ide.Context context);
		public bool get_busy ();
		public unowned string get_icon_name ();
		public async GLib.ListModel list_commands_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool run_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_run_tool_from_plugin_info (Peas.PluginInfo plugin_info);
		public bool busy { get; }
		public string icon_name { get; }
		[NoAccessorMethod]
		public Ide.RunTool run_tool { owned get; }
		public signal void run (Ide.RunContext run_context);
		public signal void started ();
		public signal void stopped ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_run_tool_get_type ()")]
	public abstract class RunTool : Ide.Object {
		[CCode (has_construct_function = false)]
		protected RunTool ();
		public virtual void force_exit ();
		public unowned string get_icon_name ();
		public virtual void prepare_to_run (Ide.Pipeline pipeline, Ide.RunCommand run_command, Ide.RunContext run_context);
		public virtual void send_signal (int signum);
		public void set_icon_name (string icon_name);
		public virtual signal void started (Ide.Subprocess subprocess);
		public virtual signal void stopped ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_runtime_get_type ()")]
	public class Runtime : Ide.Object {
		[CCode (has_construct_function = false)]
		public Runtime (string id, string title);
		public virtual bool contains_program_in_path (string program, GLib.Cancellable? cancellable = null);
		public string get_arch ();
		public unowned string get_category ();
		public unowned string get_display_name ();
		public unowned string get_icon_name ();
		public unowned string get_id ();
		public unowned string get_name ();
		public unowned string get_short_id ();
		[CCode (array_length = false, array_null_terminated = true)]
		public virtual string[] get_system_include_dirs ();
		public virtual Ide.Triplet get_triplet ();
		public virtual void prepare_configuration (Ide.Config config);
		public virtual void prepare_to_build (Ide.Pipeline? pipeline, Ide.RunContext run_context);
		public virtual void prepare_to_run (Ide.Pipeline? pipeline, Ide.RunContext run_context);
		public void set_category (string category);
		public void set_display_name (string display_name);
		public void set_icon_name (string icon_name);
		public void set_id (string id);
		public void set_name (string name);
		public void set_short_id (string short_id);
		public virtual bool supports_toolchain (Ide.Toolchain toolchain);
		public virtual GLib.File translate_file (GLib.File file);
		public string category { get; set construct; }
		public string display_name { get; set construct; }
		public string icon_name { get; set; }
		public string id { get; set construct; }
		public string name { get; set construct; }
		public string short_id { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_runtime_manager_get_type ()")]
	public sealed class RuntimeManager : Ide.Object, GLib.Initable, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected RuntimeManager ();
		public void add (Ide.Runtime runtime);
		public static unowned Ide.RuntimeManager from_context (Ide.Context context);
		public unowned Ide.Runtime get_runtime (string id);
		public void remove (Ide.Runtime runtime);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_scrubber_revealer_get_type ()")]
	public sealed class ScrubberRevealer : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ScrubberRevealer ();
		public unowned Gtk.Widget? get_content ();
		public Ide.ScrubberRevealPolicy get_policy ();
		public unowned Gtk.Widget? get_scrubber ();
		public void set_content (Gtk.Widget content);
		public void set_policy (Ide.ScrubberRevealPolicy policy);
		public void set_scrubber (Gtk.Widget scrubber);
		public Gtk.Widget content { get; set; }
		public Ide.ScrubberRevealPolicy policy { get; set; }
		public Gtk.Widget scrubber { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_sdk_get_type ()")]
	public abstract class Sdk : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Sdk ();
		public bool get_can_update ();
		public bool get_installed ();
		public unowned Ide.SdkProvider get_provider ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public void set_can_update (bool can_update);
		public void set_installed (bool installed);
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public bool can_update { get; set; }
		public bool installed { get; set; }
		public string subtitle { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_sdk_manager_get_type ()")]
	public sealed class SdkManager : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected SdkManager ();
		public static unowned Ide.SdkManager get_default ();
		[NoAccessorMethod]
		public uint n_items { get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_sdk_provider_get_type ()")]
	public abstract class SdkProvider : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected SdkProvider ();
		public virtual async bool update_async (Ide.Sdk sdk, Ide.Notification? notif, GLib.Cancellable? cancellable) throws GLib.Error;
		[HasEmitter]
		public virtual signal void sdk_added (Ide.Sdk sdk);
		[HasEmitter]
		public virtual signal void sdk_removed (Ide.Sdk sdk);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_search_engine_get_type ()")]
	public sealed class SearchEngine : Ide.Object {
		[CCode (has_construct_function = false)]
		public SearchEngine ();
		public void add_provider (Ide.SearchProvider provider);
		public bool get_busy ();
		public GLib.ListModel list_providers ();
		public void remove_provider (Ide.SearchProvider provider);
		public async Ide.SearchResults search_async (Ide.SearchCategory category, string query, uint max_results, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool busy { get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_search_entry_get_type ()")]
	public class SearchEntry : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Editable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SearchEntry ();
		public void set_occurrence_count (uint occurrence_count);
		public void set_occurrence_position (int occurrence_position);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_search_popover_get_type ()")]
	public sealed class SearchPopover : Gtk.Popover, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.ShortcutManager {
		[CCode (has_construct_function = false)]
		protected SearchPopover ();
		public bool get_show_preview ();
		public void set_show_preview (bool show_preview);
		[NoAccessorMethod]
		public Ide.SearchEngine search_engine { owned get; construct; }
		public bool show_preview { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_search_preview_get_type ()")]
	public class SearchPreview : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SearchPreview ();
		public unowned Gtk.Widget? get_child ();
		public double get_progress ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public void set_child (Gtk.Widget child);
		public void set_progress (double progress);
		public void set_subtitle (string title);
		public void set_title (string title);
		public Gtk.Widget child { get; set; }
		public double progress { get; set; }
		public string subtitle { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_search_result_get_type ()")]
	public class SearchResult : GLib.Object {
		[CCode (has_construct_function = false)]
		public SearchResult ();
		public virtual void activate (Gtk.Widget last_focus);
		public static int compare (void* a, void* b);
		public unowned string get_accelerator ();
		public unowned GLib.Icon? get_gicon ();
		public unowned Gdk.Paintable? get_paintable ();
		public int get_priority ();
		public float get_score ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public bool get_use_markup ();
		public bool get_use_underline ();
		public virtual Ide.SearchPreview? load_preview (Ide.Context context);
		[NoWrapper]
		public virtual bool matches (string query);
		public void set_accelerator (string accelerator);
		public void set_gicon (GLib.Icon gicon);
		public void set_paintable (Gdk.Paintable paintable);
		public void set_priority (int priority);
		public void set_score (float score);
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public void set_use_markup (bool use_markup);
		public void set_use_underline (bool use_underline);
		public string accelerator { get; set; }
		public GLib.Icon gicon { get; set; }
		public Gdk.Paintable paintable { get; set; }
		public int priority { get; set; }
		public float score { get; set; }
		public string subtitle { get; set; }
		public string title { get; set; }
		public bool use_markup { get; set; }
		public bool use_underline { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_search_results_get_type ()")]
	public sealed class SearchResults : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected SearchResults ();
		public bool refilter (string query);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_session_get_type ()")]
	public sealed class Session : GLib.Object {
		[CCode (has_construct_function = false)]
		public Session ();
		public void append (Ide.SessionItem item);
		[CCode (has_construct_function = false)]
		public Session.from_variant (GLib.Variant variant) throws GLib.Error;
		public unowned Ide.SessionItem? get_item (uint position);
		public uint get_n_items ();
		public void insert (uint position, Ide.SessionItem item);
		public void prepend (Ide.SessionItem item);
		public void remove (Ide.SessionItem item);
		public void remove_at (uint position);
		public GLib.Variant to_variant ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_session_item_get_type ()")]
	public sealed class SessionItem : GLib.Object {
		[CCode (has_construct_function = false)]
		public SessionItem ();
		public unowned string? get_id ();
		public GLib.Variant get_metadata_value (string key, GLib.VariantType? expected_type);
		public unowned string? get_module_name ();
		public unowned Panel.Position? get_position ();
		public unowned string? get_type_hint ();
		public unowned string? get_workspace ();
		public bool has_metadata (string key, out GLib.VariantType? value_type);
		public bool has_metadata_with_type (string key, GLib.VariantType expected_type);
		public void set_id (string? id);
		public void set_metadata_value (string key, GLib.Variant? value);
		public void set_module_name (string? module_name);
		public void set_position (Panel.Position? position);
		public void set_type_hint (string? type_hint);
		public void set_workspace (string? workspace);
		public string id { get; set; }
		public string module_name { get; set; }
		public Panel.Position position { get; set; }
		public string type_hint { get; set; }
		public string workspace { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_settings_get_type ()")]
	public sealed class Settings : GLib.Object, GLib.ActionGroup {
		[CCode (has_construct_function = false)]
		public Settings (string project_id, string schema_id);
		public void bind (string key, void* object, string property, GLib.SettingsBindFlags flags);
		public void bind_with_mapping (string key, void* object, string property, GLib.SettingsBindFlags flags, GLib.SettingsBindGetMapping? get_mapping, owned GLib.SettingsBindSetMapping? set_mapping);
		public bool get_boolean (string key);
		public GLib.Variant get_default_value (string key);
		public double get_double (string key);
		public int get_int (string key);
		public unowned string get_schema_id ();
		public string get_string (string key);
		public uint get_uint (string key);
		public GLib.Variant get_user_value (string key);
		public GLib.Variant get_value (string key);
		[CCode (has_construct_function = false)]
		public Settings.relocatable_with_suffix (string project_id, string schema_id, string path_suffix);
		public static string resolve_schema_path (string schema_id, string project_id, string path_suffix);
		public void set_boolean (string key, bool val);
		public void set_double (string key, double val);
		public void set_int (string key, int val);
		public void set_string (string key, string val);
		public void set_uint (string key, uint val);
		public void set_value (string key, GLib.Variant value);
		public void unbind (string property);
		[CCode (has_construct_function = false)]
		public Settings.with_path (string project_id, string schema_id, string path);
		[NoAccessorMethod]
		public string path { owned get; construct; }
		[NoAccessorMethod]
		public string path_suffix { owned get; construct; }
		[NoAccessorMethod]
		public string project_id { owned get; construct; }
		public string schema_id { get; construct; }
		public signal void changed (string object);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_settings_flag_action_get_type ()")]
	public class SettingsFlagAction : GLib.Object, GLib.Action {
		[CCode (has_construct_function = false)]
		public SettingsFlagAction (string schema_id, string schema_key, string? path, string flag_nick);
		[NoAccessorMethod]
		public string flag_nick { owned get; construct; }
		[NoAccessorMethod]
		public string path { owned get; construct; }
		[NoAccessorMethod]
		public string schema_id { owned get; construct; }
		[NoAccessorMethod]
		public string schema_key { owned get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_shortcut_accel_dialog_get_type ()")]
	public sealed class ShortcutAccelDialog : Gtk.Dialog, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ShortcutAccelDialog ();
		public string get_accelerator ();
		public unowned string get_shortcut_title ();
		public void set_accelerator (string accelerator);
		public void set_shortcut_title (string title);
		public string accelerator { owned get; set; }
		public string shortcut_title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	[Compact]
	public class ShortcutInfo {
		public static void @foreach (GLib.ListModel shortcuts, Ide.ShortcutInfoFunc func);
		public unowned string get_accelerator ();
		public unowned string get_action_name ();
		public unowned GLib.Variant? get_action_target ();
		public unowned string get_group ();
		public unowned string get_icon_name ();
		public unowned string get_page ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_signal_group_get_type ()")]
	public class SignalGroup : GLib.Object {
		[CCode (has_construct_function = false)]
		public SignalGroup (GLib.Type target_type);
		public void block ();
		public void connect_data (string detailed_signal, [CCode (delegate_target_pos = 2.33333, destroy_notify_pos = 2.66667)] owned GLib.Callback c_handler, GLib.ConnectFlags flags);
		public void connect_swapped (string detailed_signal, [CCode (scope = "async")] GLib.Callback c_handler);
		public unowned GLib.Object? get_target ();
		public void set_target (GLib.Object? target);
		public void unblock ();
		public GLib.Object target { get; set; }
		[NoAccessorMethod]
		public GLib.Type target_type { get; construct; }
		public signal void bind (GLib.Object instance);
		public signal void unbind ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_simple_build_system_discovery_get_type ()")]
	public class SimpleBuildSystemDiscovery : Ide.Object, Ide.BuildSystemDiscovery {
		[CCode (has_construct_function = false)]
		protected SimpleBuildSystemDiscovery ();
		public unowned string get_glob ();
		public unowned string get_hint ();
		public int get_priority ();
		public void set_glob (string glob);
		public void set_hint (string hint);
		public void set_priority (int priority);
		public string glob { get; set; }
		public string hint { get; set; }
		public int priority { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_simple_build_target_get_type ()")]
	public class SimpleBuildTarget : Ide.Object, Ide.BuildTarget {
		[CCode (has_construct_function = false)]
		public SimpleBuildTarget (Ide.Context context);
		public void set_argv (string argv);
		public void set_cwd (string cwd);
		public void set_install_directory (GLib.File install_directory);
		public void set_language (string language);
		public void set_name (string name);
		public void set_priority (int priority);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_simple_toolchain_get_type ()")]
	public class SimpleToolchain : Ide.Toolchain {
		[CCode (has_construct_function = false)]
		public SimpleToolchain (string id, string display_name);
		public void set_tool_for_language (string language, string tool_id, string tool_path);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_source_view_get_type ()")]
	public class SourceView : GtkSource.View, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SourceView ();
		public void add_controller (int priority, owned Gtk.EventController controller);
		public void append_menu (GLib.MenuModel menu_model);
		public string dup_position_label ();
		public bool get_enable_search_bubbles ();
		public unowned Pango.FontDescription get_font_desc ();
		public bool get_highlight_current_line ();
		public bool get_insert_matching_brace ();
		public void get_iter_at_visual_position (Gtk.TextIter iter, uint line, uint line_offset);
		public bool get_overwrite_braces ();
		public void get_visual_position (uint line, uint line_column);
		public void get_visual_position_range (uint line, uint line_column, uint range);
		public double get_zoom_level ();
		public void jump_to_insert ();
		public static void jump_to_iter (Gtk.TextView text_view, Gtk.TextIter iter, double within_margin, bool use_align, double xalign, double yalign);
		public void prepend_menu (GLib.MenuModel menu_model);
		public void remove_controller (Gtk.EventController controller);
		public void remove_menu (GLib.MenuModel menu_model);
		public void scroll_to_insert (Gtk.DirectionType dir);
		public void set_enable_search_bubbles (bool enable_search_bubbles);
		public void set_font_desc (Pango.FontDescription font_desc);
		public void set_highlight_current_line (bool highlight_current_line);
		public void set_insert_matching_brace (bool insert_matching_brace);
		public void set_overwrite_braces (bool overwrite_braces);
		public Pango.FontDescription font_desc { get; set; }
		[NoAccessorMethod]
		public int font_scale { get; set; }
		public bool insert_matching_brace { get; set; }
		[NoAccessorMethod]
		public double line_height { get; set; }
		public bool overwrite_braces { get; set; }
		public double zoom_level { get; }
		public signal void populate_menu ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_subprocess_launcher_get_type ()")]
	public class SubprocessLauncher : GLib.Object {
		[CCode (has_construct_function = false)]
		public SubprocessLauncher (GLib.SubprocessFlags flags);
		public void append_path (string append_path);
		public unowned string get_arg (uint pos);
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_argv ();
		public bool get_clear_env ();
		public unowned string get_cwd ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_environ ();
		public GLib.SubprocessFlags get_flags ();
		public int get_max_fd ();
		public bool get_needs_tty ();
		public bool get_run_on_host ();
		public unowned string getenv (string key);
		public void insert_argv (uint index, string arg);
		public void join_args_for_sh_c (uint start_pos);
		public void overlay_environment (Ide.Environment environment);
		public string pop_argv ();
		public void prepend_path (string prepend_path);
		public void push_args ([CCode (array_length = false, array_null_terminated = true)] string[]? args);
		public void push_argv (string argv);
		public void push_argv_parsed (string args_to_parse);
		public void replace_argv (uint index, string arg);
		public void set_argv ([CCode (array_length = false, array_null_terminated = true)] string[] args);
		public void set_clear_env (bool clear_env);
		public void set_cwd (string cwd);
		public void set_environ ([CCode (array_length = false, array_null_terminated = true)] string[]? environ_);
		public void set_flags (GLib.SubprocessFlags flags);
		public void set_run_on_host (bool run_on_host);
		public void set_setup_tty (bool setup_tty);
		public void set_stdout_file_path (string stdout_file_path);
		public void setenv (string key, string value, bool replace);
		public virtual Ide.Subprocess spawn (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void take_fd (int source_fd, int dest_fd);
		public void take_stderr_fd (int stderr_fd);
		public void take_stdin_fd (int stdin_fd);
		public void take_stdout_fd (int stdout_fd);
		[NoAccessorMethod]
		public bool clean_env { get; set; }
		public string cwd { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] environ { get; set; }
		public GLib.SubprocessFlags flags { get; set construct; }
		public bool run_on_host { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_subprocess_supervisor_get_type ()")]
	public class SubprocessSupervisor : GLib.Object {
		[CCode (has_construct_function = false)]
		public SubprocessSupervisor ();
		public unowned Ide.SubprocessLauncher? get_launcher ();
		public unowned Ide.Subprocess? get_subprocess ();
		public void set_launcher (Ide.SubprocessLauncher launcher);
		public void set_subprocess (Ide.Subprocess subprocess);
		public void start ();
		public void stop ();
		public signal void exited (Ide.Subprocess object);
		public virtual signal void spawned (Ide.Subprocess subprocess);
		public signal bool supervise (Ide.SubprocessLauncher object);
		public signal bool unsupervise (Ide.SubprocessLauncher object);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_symbol_get_type ()")]
	public class Symbol : GLib.Object {
		[CCode (has_construct_function = false)]
		public Symbol (string name, Ide.SymbolKind kind, Ide.SymbolFlags flags, Ide.Location? location, Ide.Location? header_location);
		[CCode (has_construct_function = false)]
		public Symbol.from_variant (GLib.Variant variant);
		public Ide.SymbolFlags get_flags ();
		public unowned Ide.Location? get_header_location ();
		public Ide.SymbolKind get_kind ();
		public unowned Ide.Location? get_location ();
		public unowned string get_name ();
		public GLib.Variant to_variant ();
		public Ide.SymbolFlags flags { get; construct; }
		public Ide.Location header_location { get; construct; }
		public Ide.SymbolKind kind { get; construct; }
		public Ide.Location location { get; construct; }
		public string name { get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_symbol_node_get_type ()")]
	public class SymbolNode : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SymbolNode ();
		public Ide.SymbolFlags get_flags ();
		public unowned GLib.Icon? get_gicon ();
		public unowned string get_icon_name ();
		public Ide.SymbolKind get_kind ();
		public virtual async Ide.Location? get_location_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned string get_name ();
		public bool get_use_markup ();
		[NoAccessorMethod]
		public string display_name { owned get; set; }
		[NoAccessorMethod]
		public Ide.SymbolFlags flags { get; set; }
		public string icon_name { get; }
		[NoAccessorMethod]
		public Ide.SymbolKind kind { get; set; }
		[NoAccessorMethod]
		public string name { owned get; set; }
		[NoAccessorMethod]
		public bool use_markup { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_task_get_type ()")]
	public sealed class Task : GLib.Object, GLib.AsyncResult {
		[CCode (has_construct_function = false)]
		public async Task (GLib.Object? source_object, GLib.Cancellable? cancellable);
		public void chain (Ide.Task other_task);
		public unowned GLib.Cancellable? get_cancellable ();
		public int get_complete_priority ();
		public bool get_completed ();
		public Ide.TaskKind get_kind ();
		public unowned string? get_name ();
		public int get_priority ();
		public bool get_return_on_cancel ();
		public void* get_source_tag ();
		public bool had_error ();
		public bool is_valid (void* source_object);
		public bool propagate_boolean () throws GLib.Error;
		public void* propagate_boxed () throws GLib.Error;
		public ssize_t propagate_int () throws GLib.Error;
		public GLib.Object propagate_object () throws GLib.Error;
		public void* propagate_pointer () throws GLib.Error;
		public void return_boolean (bool result);
		public void return_error (owned GLib.Error error);
		public bool return_error_if_cancelled ();
		public void return_int (ssize_t result);
		public void return_object (owned GLib.Object instance);
		public void set_check_cancellable (bool check_cancellable);
		public void set_complete_priority (int complete_priority);
		public void set_kind (Ide.TaskKind kind);
		public void set_name (string name);
		public void set_priority (int priority);
		public void set_release_on_propagate (bool release_on_propagate);
		public void set_return_on_cancel (bool return_on_cancel);
		public void set_source_tag (void* source_tag);
		public void set_task_data (void* task_data, GLib.DestroyNotify task_data_destroy);
		public bool completed { get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_task_cache_get_type ()")]
	public sealed class TaskCache : GLib.Object {
		[CCode (has_construct_function = false)]
		protected TaskCache ();
		public bool evict (void* key);
		public void evict_all ();
		public async void* get_async (void* key, bool force_update, GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned GLib.Object? peek (void* key);
		public void set_name (string name);
		[NoAccessorMethod]
		public void* key_copy_func { construct; }
		[NoAccessorMethod]
		public void* key_destroy_func { construct; }
		[NoAccessorMethod]
		public void* key_equal_func { construct; }
		[NoAccessorMethod]
		public void* key_hash_func { construct; }
		[NoAccessorMethod]
		public void* populate_callback { construct; }
		[NoAccessorMethod]
		public void* populate_callback_data { construct; }
		[NoAccessorMethod]
		public void* populate_callback_data_destroy { construct; }
		[NoAccessorMethod]
		public int64 time_to_live { construct; }
		[NoAccessorMethod]
		public void* value_copy_func { construct; }
		[NoAccessorMethod]
		public void* value_destroy_func { construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_template_base_get_type ()")]
	public abstract class TemplateBase : GLib.Object {
		[CCode (has_construct_function = false)]
		protected TemplateBase ();
		public void add_path (string path, GLib.File destination, Template.Scope scope, int mode);
		public void add_resource (string resource_path, GLib.File destination, Template.Scope scope, int mode);
		public async bool expand_all_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned Template.TemplateLocator? get_locator ();
		public void reset ();
		public void set_locator (Template.TemplateLocator locator);
		public Template.TemplateLocator locator { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_template_input_get_type ()")]
	public sealed class TemplateInput : GLib.Object {
		[CCode (has_construct_function = false)]
		public TemplateInput ();
		public async GLib.File expand_async (Ide.Context context, GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned string get_app_id ();
		public unowned string get_author ();
		public unowned GLib.File get_directory ();
		public unowned string get_language ();
		public unowned GLib.ListModel get_languages_model ();
		public unowned string get_license_name ();
		public string? get_license_path ();
		public unowned GLib.ListModel get_licenses_model ();
		public unowned string get_name ();
		public unowned string get_project_version ();
		public unowned string get_template ();
		public unowned GLib.ListModel get_templates_model ();
		public bool get_use_version_control ();
		public void set_app_id (string app_id);
		public void set_author (string author);
		public void set_directory (GLib.File directory);
		public void set_language (string language);
		public void set_license_name (string license_name);
		public void set_name (string name);
		public void set_project_version (string project_version);
		public void set_template (string template);
		public void set_use_version_control (bool use_version_control);
		public Ide.TemplateInputValidation validate ();
		public string app_id { get; set; }
		public string author { get; set; }
		public GLib.File directory { get; set; }
		public string language { get; set; }
		public GLib.ListModel languages_model { get; }
		public string license_name { get; set; }
		public GLib.ListModel licenses_model { get; }
		public string name { get; set; }
		public string project_version { get; set; }
		public string template { get; set; }
		[NoAccessorMethod]
		public string template_name { owned get; }
		public GLib.ListModel templates_model { get; }
		public bool use_version_control { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_template_locator_get_type ()")]
	public class TemplateLocator : Template.TemplateLocator {
		[CCode (has_construct_function = false)]
		public TemplateLocator ();
		public unowned string get_license_text ();
		public void set_license_text (string license_text);
		public string license_text { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_terminal_get_type ()")]
	public class Terminal : Vte.Terminal, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Terminal ();
		public void get_colors (Gdk.RGBA bg, Gdk.RGBA fg);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_terminal_launcher_get_type ()")]
	public sealed class TerminalLauncher : GLib.Object {
		[CCode (has_construct_function = false)]
		public TerminalLauncher (Ide.Context context, Ide.RunCommand run_command);
		public Ide.TerminalLauncher copy ();
		public async bool spawn_async (Vte.Pty pty, GLib.Cancellable? cancellable) throws GLib.Error;
		[NoAccessorMethod]
		public Ide.Context context { owned get; construct; }
		[NoAccessorMethod]
		public Ide.RunCommand run_command { owned get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_terminal_page_get_type ()")]
	public sealed class TerminalPage : Ide.Page, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		protected TerminalPage ();
		[CCode (has_construct_function = false)]
		public TerminalPage.completed (string title, string text, int columns, int rows);
		public void feed (string message);
		public unowned string get_current_directory_uri ();
		public unowned Ide.TerminalLauncher? get_launcher ();
		public unowned Vte.Pty get_pty ();
		public unowned Ide.Terminal get_terminal ();
		public bool has_exited ();
		public void set_launcher (Ide.TerminalLauncher launcher);
		public void set_pty (Vte.Pty pty);
		[NoAccessorMethod]
		public bool close_on_exit { get; set; }
		public Ide.TerminalLauncher launcher { get; set; }
		[NoAccessorMethod]
		public bool manage_spawn { get; construct; }
		public Vte.Pty pty { get; construct; }
		[NoAccessorMethod]
		public bool respawn_on_exit { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_terminal_popover_get_type ()")]
	public sealed class TerminalPopover : Gtk.Popover, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TerminalPopover ();
		public unowned Ide.Runtime get_runtime ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_terminal_search_get_type ()")]
	public sealed class TerminalSearch : Adw.Bin, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		protected TerminalSearch ();
		public unowned Vte.Regex? get_regex ();
		public unowned Gtk.Revealer get_revealer ();
		public bool get_wrap_around ();
		public void set_terminal (Vte.Terminal terminal);
		public Vte.Regex regex { get; }
		public bool wrap_around { get; }
		public signal void search (bool object);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_test_get_type ()")]
	public sealed class Test : GLib.Object {
		[CCode (has_construct_function = false)]
		public Test (Ide.RunCommand run_command);
		public unowned string get_icon_name ();
		public unowned string get_id ();
		public unowned Ide.RunCommand get_run_command ();
		public Ide.TestStatus get_status ();
		public unowned string get_title ();
		public string icon_name { get; }
		public string id { get; }
		public Ide.RunCommand run_command { get; construct; }
		public Ide.TestStatus status { get; }
		public string title { get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_test_manager_get_type ()")]
	public sealed class TestManager : Ide.Object, GLib.ActionGroup {
		[CCode (has_construct_function = false)]
		protected TestManager ();
		public static unowned Ide.TestManager from_context (Ide.Context context);
		public unowned Vte.Pty get_pty ();
		public unowned GLib.ListModel list_tests ();
		public async bool run_all_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool run_async (Ide.Test test, GLib.Cancellable? cancellable) throws GLib.Error;
		[NoAccessorMethod]
		public GLib.ListModel model { owned get; }
		public signal void begin_test_all ();
		public signal void end_test_all ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	[Compact]
	public class TestProvider {
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_text_edit_get_type ()")]
	public class TextEdit : Ide.Object {
		[CCode (has_construct_function = false)]
		public TextEdit (Ide.Range range, string text);
		[CCode (has_construct_function = false)]
		public TextEdit.from_variant (GLib.Variant? variant);
		public unowned Ide.Range? get_range ();
		public unowned string? get_text ();
		public void set_range (Ide.Range range);
		public void set_text (string text);
		public GLib.Variant to_variant ();
		public Ide.Range range { get; set; }
		public string text { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	[Compact]
	public class ThreadPool {
		public static void push (Ide.ThreadPoolKind kind, [CCode (scope = "async")] Ide.ThreadFunc func);
		public static void push_task (Ide.ThreadPoolKind kind, GLib.Task task, [CCode (scope = "async")] GLib.TaskThreadFunc func);
		public static void push_with_priority (Ide.ThreadPoolKind kind, int priority, [CCode (scope = "async")] Ide.ThreadFunc func);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_toolchain_get_type ()")]
	public abstract class Toolchain : Ide.Object {
		[CCode (has_construct_function = false)]
		protected Toolchain ();
		public unowned string get_display_name ();
		public Ide.Triplet get_host_triplet ();
		public unowned string get_id ();
		public virtual unowned string get_tool_for_language (string language, string tool_id);
		public virtual GLib.HashTable<string,string> get_tools_for_id (string tool_id);
		public void set_display_name (string display_name);
		public void set_host_triplet (Ide.Triplet host_triplet);
		public void set_id (string id);
		public string display_name { get; set; }
		public Ide.Triplet host_triplet { owned get; set; }
		public string id { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_toolchain_manager_get_type ()")]
	public sealed class ToolchainManager : Ide.Object, GLib.AsyncInitable, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected ToolchainManager ();
		public static unowned Ide.ToolchainManager from_context (Ide.Context context);
		public Ide.Toolchain get_toolchain (string id);
		public bool is_loaded ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_transfer_get_type ()")]
	public class Transfer : Ide.Object {
		[CCode (has_construct_function = false)]
		protected Transfer ();
		public void cancel ();
		public Ide.Notification? create_notification ();
		public static GLib.Quark error_quark ();
		public virtual async bool execute_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool get_active ();
		public bool get_completed ();
		public unowned string get_icon_name ();
		public double get_progress ();
		public unowned string get_status ();
		public unowned string get_title ();
		public void set_icon_name (string icon_name);
		public void set_progress (double progress);
		public void set_status (string status);
		public void set_title (string title);
		public bool active { get; }
		public bool completed { get; }
		public string icon_name { get; set; }
		public double progress { get; set; }
		public string status { get; set; }
		public string title { get; set; }
		public signal void cancelled ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_transfer_manager_get_type ()")]
	public sealed class TransferManager : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		protected TransferManager ();
		public void cancel_all ();
		public void clear ();
		public async bool execute_async (Ide.Transfer transfer, GLib.Cancellable? cancellable) throws GLib.Error;
		public static unowned Ide.TransferManager get_default ();
		public bool get_has_active ();
		public double get_progress ();
		public bool has_active { get; }
		public double progress { get; }
		public signal void all_transfers_completed ();
		public signal void transfer_completed (Ide.Transfer transfer);
		public signal void transfer_failed (Ide.Transfer transfer, GLib.Error reason);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tree_get_type ()")]
	public class Tree : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public Tree ();
		public void collapse_node (Ide.TreeNode node);
		public void expand_node (Ide.TreeNode node);
		public async bool expand_node_async (Ide.TreeNode node, GLib.Cancellable? cancellable) throws GLib.Error;
		public void expand_to_node (Ide.TreeNode node);
		public unowned GLib.MenuModel? get_menu_model ();
		public static GLib.Resource get_resource ();
		public unowned Ide.TreeNode? get_root ();
		public unowned Ide.TreeNode? get_selected_node ();
		public void invalidate_all ();
		public bool is_node_expanded (Ide.TreeNode node);
		public void set_menu_model (GLib.MenuModel menu_model);
		public void set_root (Ide.TreeNode root);
		public void set_selected_node (Ide.TreeNode? node);
		public void show_popover_at_node (Ide.TreeNode node, Gtk.Popover popover);
		[NoAccessorMethod]
		public string kind { owned get; construct; }
		public GLib.MenuModel menu_model { get; set; }
		public Ide.TreeNode root { get; set; }
		public Ide.TreeNode selected_node { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tree_expander_get_type ()")]
	public sealed class TreeExpander : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TreeExpander ();
		public unowned GLib.Icon? get_expanded_icon ();
		public unowned GLib.Icon? get_icon ();
		public GLib.Object? get_item ();
		public unowned Gtk.TreeListRow? get_list_row ();
		public unowned GLib.MenuModel? get_menu_model ();
		public unowned Gtk.Widget? get_suffix ();
		public unowned string get_title ();
		public bool get_use_markup ();
		public void set_expanded_icon (GLib.Icon icon);
		public void set_expanded_icon_name (string expanded_icon_name);
		public void set_icon (GLib.Icon icon);
		public void set_icon_name (string icon_name);
		public void set_list_row (Gtk.TreeListRow list_row);
		public void set_menu_model (GLib.MenuModel menu_model);
		public void set_suffix (Gtk.Widget suffix);
		public void set_title (string title);
		public void set_use_markup (bool use_markup);
		public void show_popover (Gtk.Popover popover);
		[NoAccessorMethod]
		public bool expanded { get; }
		public GLib.Icon expanded_icon { get; set; }
		public string expanded_icon_name { set; }
		public GLib.Icon icon { get; set; }
		public string icon_name { set; }
		public GLib.Object item { owned get; }
		public Gtk.TreeListRow list_row { get; set; }
		public GLib.MenuModel menu_model { get; set; }
		public Gtk.Widget suffix { get; set; }
		public string title { get; set; }
		public bool use_markup { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tree_node_get_type ()")]
	public class TreeNode : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		public TreeNode ();
		public bool get_children_possible ();
		public bool get_destroy_item ();
		public unowned GLib.Icon? get_expanded_icon ();
		public unowned Ide.TreeNode? get_first_child ();
		public Ide.TreeNodeFlags get_flags ();
		public bool get_has_error ();
		public unowned GLib.Icon? get_icon ();
		public bool get_is_header ();
		[CCode (cname = "ide_tree_node_get_item")]
		public GLib.Object? get_item1 ();
		public unowned Ide.TreeNode? get_last_child ();
		public uint get_n_children ();
		public unowned Ide.TreeNode? get_next_sibling ();
		public unowned Ide.TreeNode? get_parent ();
		public unowned Ide.TreeNode? get_prev_sibling ();
		public bool get_reset_on_collapse ();
		public unowned Ide.TreeNode get_root ();
		public unowned string get_title ();
		public bool get_use_markup ();
		public bool holds (GLib.Type type);
		public void insert_after (Ide.TreeNode parent, Ide.TreeNode previous_sibling);
		public void insert_before (Ide.TreeNode parent, Ide.TreeNode next_sibling);
		public void insert_sorted (Ide.TreeNode child, Ide.TreeNodeCompare cmpfn);
		public void remove (Ide.TreeNode child);
		public void set_children_possible (bool children_possible);
		public void set_destroy_item (bool destroy_item);
		public void set_expanded_icon (GLib.Icon expanded_icon);
		public void set_expanded_icon_name (string expanded_icon_name);
		public void set_flags (Ide.TreeNodeFlags flags);
		public void set_has_error (bool has_error);
		public void set_icon (GLib.Icon icon);
		public void set_icon_name (string icon_name);
		public void set_is_header (bool is_header);
		public void set_item (GLib.Object? item);
		public void set_parent (Ide.TreeNode node);
		public void set_reset_on_collapse (bool reset_on_collapse);
		public void set_title (string title);
		public void set_use_markup (bool use_markup);
		public void traverse (GLib.TraverseType traverse_type, GLib.TraverseFlags traverse_flags, int max_depth, Ide.TreeTraverseFunc traverse_func);
		public void unparent ();
		public bool children_possible { get; set; }
		public bool destroy_item { get; set; }
		public GLib.Icon expanded_icon { get; set; }
		public string expanded_icon_name { set; }
		public Ide.TreeNodeFlags flags { get; set; }
		public bool has_error { get; set; }
		public GLib.Icon icon { get; set; }
		public string icon_name { set; }
		public bool is_header { get; set; }
		[NoAccessorMethod]
		public GLib.Object item { owned get; set; }
		[NoAccessorMethod]
		public bool loading { get; }
		public GLib.Object parent { get; set; }
		public bool reset_on_collapse { get; set; }
		public string title { get; set; }
		public bool use_markup { get; set; }
		public signal bool show_popover (Gtk.Popover object);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", ref_function = "ide_triplet_ref", type_id = "ide_triplet_get_type ()", unref_function = "ide_triplet_unref")]
	[Compact]
	public class Triplet {
		[CCode (has_construct_function = false)]
		public Triplet (string full_name);
		[CCode (has_construct_function = false)]
		public Triplet.from_system ();
		public unowned string get_arch ();
		public unowned string get_full_name ();
		public unowned string? get_kernel ();
		public unowned string? get_operating_system ();
		public unowned string? get_vendor ();
		public bool is_system ();
		public unowned Ide.Triplet @ref ();
		public void unref ();
		[CCode (has_construct_function = false)]
		public Triplet.with_quadruplet (string arch, string? vendor, string? kernel, string? operating_system);
		[CCode (has_construct_function = false)]
		public Triplet.with_triplet (string arch, string? kernel, string? operating_system);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_truncate_model_get_type ()")]
	public sealed class TruncateModel : GLib.Object, GLib.ListModel {
		[CCode (has_construct_function = false)]
		public TruncateModel (GLib.ListModel child_model);
		public bool get_can_expand ();
		public unowned GLib.ListModel get_child_model ();
		public bool get_expanded ();
		public uint get_max_items ();
		public void set_expanded (bool expanded);
		public void set_max_items (uint max_items);
		public bool can_expand { get; }
		public GLib.ListModel child_model { get; construct; }
		public bool expanded { get; set; }
		public uint max_items { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_get_type ()")]
	public sealed class Tweaks : Ide.TweaksItem, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public Tweaks ();
		public void add_callback (string name, GLib.Callback callback);
		public void expose_object (string name, GLib.Object object);
		[CCode (has_construct_function = false)]
		public Tweaks.for_context (Ide.Context? context);
		public unowned Ide.Context? get_context ();
		public unowned GLib.Object? get_object (string name);
		public unowned string get_project_id ();
		public bool load_from_file (GLib.File file, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public void set_project_id (string project_id);
		public Ide.Context context { get; construct; }
		public string project_id { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_addin_get_type ()")]
	public abstract class TweaksAddin : GLib.Object {
		[CCode (has_construct_function = false)]
		protected TweaksAddin ();
		public void add_callback (string name, GLib.Callback callback);
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_resource_paths ();
		public virtual void load (Ide.Tweaks tweaks);
		public void set_resource_paths (string resource_path);
		public virtual void unload (Ide.Tweaks tweaks);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] resource_paths { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_binding_get_type ()")]
	public abstract class TweaksBinding : Ide.TweaksItem, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected TweaksBinding ();
		public void bind (void* instance, string property_name);
		public void bind_with_transform (void* instance, string property_name, [CCode (scope = "async")] Ide.TweaksBindingTransform? get_transform, owned Ide.TweaksBindingTransform? set_transform);
		public virtual Gtk.Adjustment? create_adjustment ();
		public string? dup_string ();
		[CCode (array_length = false, array_null_terminated = true)]
		public string[]? dup_strv ();
		[NoWrapper]
		public virtual GLib.Type get_expected_type ();
		public virtual bool get_value (GLib.Value value);
		public void set_string (string string);
		public void set_strv (string strv);
		public virtual void set_value (GLib.Value value);
		public void set_variant (GLib.Variant variant);
		public void unbind ();
		[HasEmitter]
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_caption_get_type ()")]
	public sealed class TweaksCaption : Ide.TweaksWidget, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksCaption ();
		public unowned string get_text ();
		public void set_text (string text);
		public string text { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_choice_get_type ()")]
	public sealed class TweaksChoice : Ide.TweaksItem, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksChoice ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public unowned GLib.Variant? get_value ();
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public void set_value (GLib.Variant value);
		public string subtitle { get; set; }
		public string title { get; set; }
		public GLib.Variant value { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_combo_get_type ()")]
	public sealed class TweaksCombo : Ide.TweaksWidget, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksCombo ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public string subtitle { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_combo_row_get_type ()")]
	public sealed class TweaksComboRow : Adw.ComboRow, Gtk.Accessible, Gtk.Actionable, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		protected TweaksComboRow ();
		[NoAccessorMethod]
		public Ide.TweaksBinding binding { owned get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_directory_get_type ()")]
	public sealed class TweaksDirectory : Ide.TweaksWidget, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksDirectory ();
		public bool get_is_directory ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public void set_is_directory (bool is_directory);
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public bool is_directory { get; set; }
		public string subtitle { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_entry_get_type ()")]
	public sealed class TweaksEntry : Ide.TweaksWidget, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksEntry ();
		public unowned string get_title ();
		public void set_title (string title);
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_factory_get_type ()")]
	public sealed class TweaksFactory : Ide.TweaksItem, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksFactory ();
		public unowned GLib.Object? get_item ();
		public unowned GLib.ListModel? get_model ();
		public void set_model (GLib.ListModel model);
		public bool visit (Ide.TweaksItemVisitor visitor);
		public GLib.Object item { get; }
		public GLib.ListModel model { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_font_get_type ()")]
	public sealed class TweaksFont : Ide.TweaksWidget, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksFont ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public string subtitle { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_group_get_type ()")]
	public sealed class TweaksGroup : Ide.TweaksItem, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksGroup ();
		public unowned string get_title ();
		public void set_title (string title);
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_info_get_type ()")]
	public sealed class TweaksInfo : Ide.TweaksWidget, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksInfo ();
		public unowned string get_title ();
		public unowned string get_value ();
		public void set_title (string title);
		public void set_value (string value);
		public string title { get; set; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_item_get_type ()")]
	public abstract class TweaksItem : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected TweaksItem ();
		[NoWrapper]
		public virtual bool accepts (Ide.TweaksItem child);
		public virtual Ide.TweaksItem copy ();
		public void* get_ancestor (GLib.Type ancestor_type);
		public unowned Ide.TweaksItem? get_first_child ();
		public unowned string get_hidden_when ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_keywords ();
		public unowned Ide.TweaksItem? get_last_child ();
		public unowned Ide.TweaksItem? get_next_sibling ();
		public unowned Ide.TweaksItem? get_parent ();
		public unowned Ide.TweaksItem? get_previous_sibling ();
		public unowned Ide.TweaksItem get_root ();
		public void insert_after (Ide.TweaksItem parent, Ide.TweaksItem previous_sibling);
		public void insert_before (Ide.TweaksItem parent, Ide.TweaksItem next_sibling);
		public bool is_ancestor (Ide.TweaksItem ancestor);
		public virtual bool match (Ide.PatternSpec spec);
		public void set_hidden_when (string? hidden_when);
		public void set_keywords (string keywords);
		public void unparent ();
		public bool visit_children (Ide.TweaksItemVisitor visitor);
		public string hidden_when { get; set; }
		public string id { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] keywords { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_page_get_type ()")]
	public sealed class TweaksPage : Ide.TweaksItem, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksPage ();
		public bool get_has_subpage ();
		public unowned string get_icon_name ();
		public unowned Ide.TweaksItem? get_section ();
		public bool get_show_icon ();
		public bool get_show_search ();
		public unowned string get_title ();
		public void set_icon_name (string icon_name);
		public void set_show_icon (bool show_icon);
		public void set_show_search (bool show_search);
		public void set_title (string title);
		public bool has_subpage { get; }
		public string icon_name { get; set; }
		public Ide.TweaksSection section { get; }
		public bool show_icon { get; set; }
		public bool show_search { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_property_get_type ()")]
	public sealed class TweaksProperty : Ide.TweaksBinding, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksProperty ();
		public GLib.Object? dup_object ();
		public unowned string get_name ();
		public void set_name (string name);
		public void set_object (GLib.Object object);
		public string name { get; set; }
		[NoAccessorMethod]
		public GLib.Object object { owned get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_radio_get_type ()")]
	public sealed class TweaksRadio : Ide.TweaksWidget, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksRadio ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public unowned GLib.Variant? get_value ();
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public void set_value (GLib.Variant value);
		public string subtitle { get; set; }
		public string title { get; set; }
		public GLib.Variant value { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_section_get_type ()")]
	public sealed class TweaksSection : Ide.TweaksItem, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksSection ();
		public bool get_show_header ();
		public unowned string get_title ();
		public void set_show_header (bool show_header);
		public void set_title (string title);
		public bool show_header { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_setting_get_type ()")]
	public sealed class TweaksSetting : Ide.TweaksBinding, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksSetting ();
		public unowned string get_path_suffix ();
		public unowned string get_schema_id ();
		public unowned string get_schema_key ();
		public void set_path_suffix (string path_suffix);
		public void set_schema_id (string schema_id);
		public void set_schema_key (string schema_key);
		public string path_suffix { get; set; }
		public string schema_id { get; set; }
		public string schema_key { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_spin_get_type ()")]
	public sealed class TweaksSpin : Ide.TweaksWidget, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksSpin ();
		public uint get_digits ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public void set_digits (uint digits);
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public uint digits { get; set; }
		public string subtitle { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_switch_get_type ()")]
	public sealed class TweaksSwitch : Ide.TweaksWidget, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksSwitch ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public string subtitle { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_widget_get_type ()")]
	public class TweaksWidget : Ide.TweaksItem, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TweaksWidget ();
		public unowned Ide.TweaksBinding? get_binding ();
		public void set_binding (Ide.TweaksBinding binding);
		public Ide.TweaksBinding binding { get; set; }
		public signal Gtk.Widget? create_for_item (Ide.TweaksItem item);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_tweaks_window_get_type ()")]
	public sealed class TweaksWindow : Adw.Window, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TweaksWindow ();
		public bool get_can_navigate_back ();
		public unowned Ide.Tweaks? get_tweaks ();
		public void navigate_back ();
		public void navigate_initial ();
		public void navigate_to (Ide.TweaksItem? item);
		public void set_tweaks (Ide.Tweaks? tweaks);
		public bool can_navigate_back { get; }
		[NoAccessorMethod]
		public bool folded { get; set; }
		public Ide.Tweaks tweaks { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_unix_fd_map_get_type ()")]
	public sealed class UnixFDMap : GLib.Object {
		[CCode (has_construct_function = false)]
		public UnixFDMap ();
		public GLib.IOStream create_stream (int dest_read_fd, int dest_write_fd) throws GLib.Error;
		public int @get (uint index, int dest_fd) throws GLib.Error;
		public uint get_length ();
		public int get_max_dest_fd ();
		public bool open_file (string filename, int mode, int dest_fd) throws GLib.Error;
		public int peek (uint index, int dest_fd);
		public int peek_stderr ();
		public int peek_stdin ();
		public int peek_stdout ();
		public bool silence_fd (int dest_fd) throws GLib.Error;
		public bool stderr_isatty ();
		public bool stdin_isatty ();
		public bool stdout_isatty ();
		public int steal (uint index, int dest_fd);
		public bool steal_from (Ide.UnixFDMap other) throws GLib.Error;
		public int steal_stderr ();
		public int steal_stdin ();
		public int steal_stdout ();
		public void take (int source_fd, int dest_fd);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", ref_function = "ide_unsaved_file_ref", type_id = "ide_unsaved_file_get_type ()", unref_function = "ide_unsaved_file_unref")]
	[Compact]
	public class UnsavedFile {
		public unowned GLib.Bytes get_content ();
		public unowned GLib.File get_file ();
		public int64 get_sequence ();
		public unowned string get_temp_path ();
		public bool persist (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public Ide.UnsavedFile @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_unsaved_files_get_type ()")]
	public sealed class UnsavedFiles : Ide.Object {
		[CCode (has_construct_function = false)]
		protected UnsavedFiles ();
		public void clear ();
		public bool contains (GLib.File file);
		public static unowned Ide.UnsavedFiles from_context (Ide.Context context);
		public int64 get_sequence ();
		public Ide.UnsavedFile? get_unsaved_file (GLib.File file);
		public async bool reap_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public void remove (GLib.File file);
		public async bool restore_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool save_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public GLib.GenericArray<Ide.UnsavedFile> to_array ();
		public void update (GLib.File file, GLib.Bytes content);
		[NoAccessorMethod]
		public string project_id { owned get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_vcs_clone_request_get_type ()")]
	public sealed class VcsCloneRequest : Ide.Object {
		[CCode (has_construct_function = false)]
		public VcsCloneRequest ();
		public async GLib.File clone_async (Ide.Notification notif, GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned string get_author_email ();
		public unowned string get_author_name ();
		public unowned GLib.ListModel get_branch_model ();
		public unowned string get_branch_name ();
		public unowned GLib.File get_directory ();
		public unowned string get_module_name ();
		public unowned string get_uri ();
		public void populate_branches ();
		public void set_author_email (string author_email);
		public void set_author_name (string author_name);
		public void set_branch_name (string branch_name);
		public void set_directory (GLib.File directory);
		public void set_module_name (string module_name);
		public void set_uri (string uri);
		public Ide.VcsCloneRequestValidation validate ();
		public string author_email { get; set; }
		public string author_name { get; set; }
		public GLib.ListModel branch_model { get; }
		[NoAccessorMethod]
		public bool branch_model_busy { get; }
		public string branch_name { get; set; }
		[NoAccessorMethod]
		public bool can_select_branch { get; }
		public GLib.File directory { get; set; }
		public string module_name { get; set; }
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_vcs_file_info_get_type ()")]
	public class VcsFileInfo : GLib.Object {
		[CCode (has_construct_function = false)]
		public VcsFileInfo (GLib.File file);
		public unowned GLib.File get_file ();
		public Ide.VcsFileStatus get_status ();
		public void set_status (Ide.VcsFileStatus status);
		public GLib.File file { get; construct; }
		public Ide.VcsFileStatus status { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_vcs_monitor_get_type ()")]
	public sealed class VcsMonitor : Ide.Object {
		[CCode (has_construct_function = false)]
		protected VcsMonitor ();
		public static unowned Ide.VcsMonitor? from_context (Ide.Context context);
		public uint64 get_sequence ();
		public Ide.VcsFileInfo? ref_info (GLib.File file);
		public GLib.File? ref_root ();
		public Ide.Vcs? ref_vcs ();
		public void set_root (GLib.File file);
		public void set_vcs (Ide.Vcs vcs);
		[NoAccessorMethod]
		public GLib.File root { owned get; set; }
		[NoAccessorMethod]
		public Ide.Vcs vcs { owned get; set; }
		public signal void changed (GLib.File file, GLib.File? other_file, GLib.FileMonitorEvent event);
		public signal void reloaded ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", ref_function = "ide_vcs_uri_ref", type_id = "ide_vcs_uri_get_type ()", unref_function = "ide_vcs_uri_unref")]
	[Compact]
	public class VcsUri {
		[CCode (has_construct_function = false)]
		public VcsUri (string uri);
		public string? get_clone_name ();
		public unowned string get_host ();
		public unowned string get_path ();
		public uint get_port ();
		public unowned string get_scheme ();
		public unowned string get_user ();
		public static bool is_valid (string uri_string);
		public Ide.VcsUri @ref ();
		public void set_host (string host);
		public void set_path (string path);
		public void set_port (uint port);
		public void set_scheme (string scheme);
		public void set_user (string user);
		public string to_string ();
		public void unref ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_webkit_page_get_type ()")]
	public class WebkitPage : Ide.Page, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public WebkitPage ();
		public bool focus_address ();
		[CCode (has_construct_function = false)]
		public WebkitPage.for_generator (Ide.HtmlGenerator generator);
		public bool get_show_toolbar ();
		public unowned Gtk.Widget get_view ();
		public void go_back ();
		public void go_forward ();
		public bool has_generator ();
		public void load_uri (string uri);
		public void print ();
		public void reload ();
		public void reload_ignoring_cache ();
		public void set_show_toolbar (bool show_toolbar);
		[NoAccessorMethod]
		[Version (since = "44")]
		public bool enable_javascript { get; set; }
		public bool show_toolbar { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_workbench_get_type ()")]
	public sealed class Workbench : Gtk.WindowGroup {
		[CCode (has_construct_function = false)]
		public Workbench ();
		public void activate ();
		public void add_workspace (Ide.Workspace workspace);
		public unowned Ide.WorkbenchAddin? addin_find_by_module_name (string module_name);
		public void focus_workspace (Ide.Workspace workspace);
		[CCode (has_construct_function = false)]
		public Workbench.for_context (Ide.Context context);
		public void foreach_page (Ide.PageCallback callback);
		public void foreach_workspace (Ide.WorkspaceCallback callback);
		public static unowned Ide.Workbench? from_context (Ide.Context context);
		public static unowned Ide.Workbench? from_widget (Gtk.Widget widget);
		public unowned Ide.BuildSystem? get_build_system ();
		public unowned Ide.Context get_context ();
		public unowned Ide.Workspace? get_current_workspace ();
		public unowned Ide.ProjectInfo? get_project_info ();
		public unowned Ide.SearchEngine get_search_engine ();
		public unowned Ide.Vcs? get_vcs ();
		public unowned Ide.VcsMonitor? get_vcs_monitor ();
		public unowned Ide.Workspace? get_workspace_by_type (GLib.Type type);
		public bool has_project ();
		public async bool load_project_async (Ide.ProjectInfo project_info, GLib.Type workspace_type, GLib.Cancellable? cancellable) throws GLib.Error;
		public async void open_all_async ([CCode (array_length_cname = "n_files", array_length_pos = 1.5, array_length_type = "guint")] GLib.File[] files, string? hint, GLib.Cancellable? cancellable);
		public async bool open_async (GLib.File file, string? hint, Ide.BufferOpenFlags flags, Panel.Position? position, GLib.Cancellable? cancellable) throws GLib.Error;
		public async void open_at_async (GLib.File file, string? hint, int at_line, int at_line_offset, Ide.BufferOpenFlags flags, Panel.Position position, GLib.Cancellable? cancellable);
		public void remove_workspace (Ide.Workspace workspace);
		public async GLib.File resolve_file_async (string filename, GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_build_system (Ide.BuildSystem? build_system);
		public void set_vcs (Ide.Vcs? vcs);
		public async bool unload_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public Ide.Context context { get; construct; }
		public Ide.Vcs vcs { get; set; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_id = "ide_workspace_get_type ()")]
	public abstract class Workspace : Adw.ApplicationWindow, GLib.ActionGroup, GLib.ActionMap, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Gtk.Native, Gtk.Root, Gtk.ShortcutManager {
		[CCode (has_construct_function = false)]
		protected Workspace ();
		public void action_set_enabled (string action_name, bool enabled);
		public virtual void add_grid_column (uint column);
		public virtual void add_overlay (Gtk.Widget overlay);
		public virtual void add_page (Ide.Page page, Panel.Position position);
		public virtual void add_pane (Ide.Pane pane, Panel.Position position);
		public unowned Ide.WorkspaceAddin? addin_find_by_module_name (string module_name);
		[NoWrapper]
		public virtual async bool agree_to_close_async (GLib.Cancellable? cancellable) throws GLib.Error;
		[NoWrapper]
		public virtual bool can_search ();
		[NoWrapper]
		public virtual void context_set (Ide.Context context);
		public virtual void foreach_page (Ide.PageCallback callback);
		public unowned GLib.Cancellable get_cancellable ();
		public unowned Ide.Context? get_context ();
		public virtual unowned Panel.Frame? get_frame_at_position (Panel.Position position);
		public virtual unowned Ide.HeaderBar? get_header_bar ();
		public virtual unowned Ide.Frame? get_most_recent_frame ();
		public virtual unowned Ide.Page? get_most_recent_page ();
		public unowned Panel.Statusbar? get_statusbar ();
		public void inhibit_logout ();
		[CCode (cname = "ide_workspace_class_install_action")]
		public class void install_action (string action_name, string? parameter_type, Ide.ActionActivateFunc activate);
		[CCode (cname = "ide_workspace_class_install_property_action")]
		public class void install_property_action (string action_name, string property_name);
		public virtual void remove_overlay (Gtk.Widget overlay);
		[NoWrapper]
		public virtual void restore_session (Ide.Session session);
		[NoWrapper]
		public virtual void restore_size (int width, int height);
		[NoWrapper]
		public virtual void save_session (Ide.Session session);
		[NoWrapper]
		public virtual bool save_size (int width, int height);
		[CCode (cname = "ide_workspace_class_set_kind")]
		public class void set_kind (string kind);
		public void uninhibit_logout ();
		public Ide.Context context { get; }
		public string id { get; set; }
		[NoAccessorMethod]
		public Ide.SearchPopover search_popover { owned get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeApplicationAddinInterface", type_id = "ide_application_addin_get_type ()")]
	public interface ApplicationAddin : GLib.Object {
		public abstract void activate (Ide.Application application);
		public abstract void add_option_entries (Ide.Application application);
		public abstract void handle_command_line (Ide.Application application, GLib.ApplicationCommandLine cmdline);
		public abstract void load (Ide.Application application);
		public abstract void open (Ide.Application application, [CCode (array_length_cname = "n_files", array_length_pos = 2.5)] GLib.File[] files, string hint);
		public abstract void unload (Ide.Application application);
		public abstract void workbench_added (Ide.Workbench workbench);
		public abstract void workbench_removed (Ide.Workbench workbench);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeBufferAddinInterface", type_id = "ide_buffer_addin_get_type ()")]
	public interface BufferAddin : GLib.Object {
		public abstract void change_settled (Ide.Buffer buffer);
		public abstract void file_loaded (Ide.Buffer buffer, GLib.File file);
		public abstract void file_saved (Ide.Buffer buffer, GLib.File file);
		public abstract void language_set (Ide.Buffer buffer, string language_id);
		public abstract void load (Ide.Buffer buffer);
		public abstract void save_file (Ide.Buffer buffer, GLib.File file);
		public abstract async bool settle_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void style_scheme_changed (Ide.Buffer buffer);
		public abstract void unload (Ide.Buffer buffer);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeBuildSystemInterface", type_id = "ide_build_system_get_type ()")]
	public interface BuildSystem : Ide.Object {
		public static unowned Ide.BuildSystem? from_context (Ide.Context context);
		[CCode (array_length = false, array_null_terminated = true)]
		public virtual async string[] get_build_flags_async (GLib.File file, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async GLib.HashTable<Ide.File,string[]> get_build_flags_for_dir_async (GLib.File directory, GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual async GLib.HashTable<Ide.File,string[]> get_build_flags_for_files_async (GLib.GenericArray<GLib.File> files, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract string get_builddir (Ide.Pipeline pipeline);
		public abstract string get_display_name ();
		public abstract string get_id ();
		public abstract int get_priority ();
		public virtual string? get_project_version ();
		public virtual string get_srcdir ();
		public virtual bool supports_language (string language);
		public virtual bool supports_toolchain (Ide.Toolchain toolchain);
		[NoAccessorMethod]
		public abstract GLib.File project_file { owned get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeBuildSystemDiscoveryInterface", type_id = "ide_build_system_discovery_get_type ()")]
	public interface BuildSystemDiscovery : GLib.Object {
		public abstract string discover (GLib.File project_file, GLib.Cancellable? cancellable, out int priority) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeBuildTargetInterface", type_id = "ide_build_target_get_type ()")]
	public interface BuildTarget : Ide.Object {
		public bool compare (Ide.BuildTarget right);
		[CCode (array_length = false, array_null_terminated = true)]
		public abstract string[] get_argv ();
		public abstract string? get_cwd ();
		public abstract string? get_display_name ();
		public bool get_install ();
		public abstract GLib.File? get_install_directory ();
		public abstract Ide.ArtifactKind get_kind ();
		public abstract string get_language ();
		public abstract string? get_name ();
		public abstract int get_priority ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeBuildTargetProviderInterface", type_id = "ide_build_target_provider_get_type ()")]
	public interface BuildTargetProvider : GLib.Object {
		public abstract async GLib.GenericArray<Ide.BuildTarget> get_targets_async (GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeCodeActionInterface", type_id = "ide_code_action_get_type ()")]
	public interface CodeAction : GLib.Object {
		public abstract async bool execute_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract string get_title ();
		public abstract string title { owned get; construct; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeCodeActionProviderInterface", type_id = "ide_code_action_provider_get_type ()")]
	public interface CodeActionProvider : GLib.Object {
		public abstract void load ();
		public abstract async GLib.GenericArray<Ide.CodeAction> query_async (Ide.Buffer buffer, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void set_diagnostics (Ide.Diagnostics diags);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeCodeIndexEntriesInterface", type_id = "ide_code_index_entries_get_type ()")]
	public interface CodeIndexEntries : GLib.Object {
		public async GLib.GenericArray<Ide.CodeIndexEntry> collect_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract GLib.File get_file ();
		public abstract Ide.CodeIndexEntry? get_next_entry ();
		public abstract async GLib.GenericArray<Ide.CodeIndexEntry> next_entries_async (GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeCodeIndexerInterface", type_id = "ide_code_indexer_get_type ()")]
	public interface CodeIndexer : Ide.Object {
		public abstract async string generate_key_async (Ide.Location location, [CCode (array_length = false, array_null_terminated = true)] string[]? build_flags, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract async Ide.CodeIndexEntries index_file_async (GLib.File file, [CCode (array_length = false, array_null_terminated = true)] string[]? build_flags, GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeConfigProviderInterface", type_id = "ide_config_provider_get_type ()")]
	public interface ConfigProvider : Ide.Object {
		public abstract void @delete (Ide.Config config);
		public abstract void duplicate (Ide.Config config);
		public void emit_added (Ide.Config config);
		public void emit_removed (Ide.Config config);
		public abstract async bool load_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract async bool save_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void unload ();
		public virtual signal void added (Ide.Config config);
		public virtual signal void removed (Ide.Config config);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeDependencyUpdaterInterface", type_id = "ide_dependency_updater_get_type ()")]
	public interface DependencyUpdater : Ide.Object {
		public abstract async bool update_async (GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeDiagnosticProviderInterface", type_id = "ide_diagnostic_provider_get_type ()")]
	public interface DiagnosticProvider : Ide.Object {
		public abstract async Ide.Diagnostics diagnose_async (GLib.File file, GLib.Bytes? contents, string? lang_id, GLib.Cancellable? cancellable) throws GLib.Error;
		public void emit_invalidated ();
		public abstract void load ();
		public abstract void unload ();
		public signal void invalidated ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeEditorPageAddinInterface", type_id = "ide_editor_page_addin_get_type ()")]
	public interface EditorPageAddin : GLib.Object {
		public abstract void frame_set (Ide.Frame frame);
		public abstract void language_changed (string language_id);
		public abstract void load (Ide.EditorPage page);
		public abstract GLib.ActionGroup? ref_action_group ();
		public abstract void unload (Ide.EditorPage page);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeFormatterInterface", type_id = "ide_formatter_get_type ()")]
	public interface Formatter : GLib.Object {
		public abstract async bool format_async (Ide.Buffer buffer, Ide.FormatterOptions options, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract async bool format_range_async (Ide.Buffer buffer, Ide.FormatterOptions options, Gtk.TextIter begin, Gtk.TextIter end, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void load ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeFrameAddinInterface", type_id = "ide_frame_addin_get_type ()")]
	public interface FrameAddin : GLib.Object {
		public abstract void load (Ide.Frame frame);
		public abstract void set_page (Ide.Page? page);
		public abstract void unload (Ide.Frame frame);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeGreeterSectionInterface", type_id = "ide_greeter_section_get_type ()")]
	public interface GreeterSection : Gtk.Widget {
		public abstract bool activate_first ();
		public abstract void delete_selected ();
		public void emit_project_activated (Ide.ProjectInfo project_info);
		public abstract bool filter (Ide.PatternSpec? spec);
		public abstract int get_priority ();
		public abstract void purge_selected ();
		public abstract void set_selection_mode (bool selection_mode);
		public virtual signal void project_activated (Ide.ProjectInfo project_info);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeGutterInterface", type_id = "ide_gutter_get_type ()")]
	public interface Gutter : GtkSource.GutterRenderer {
		public bool get_show_line_changes ();
		public bool get_show_line_diagnostics ();
		public bool get_show_line_numbers ();
		public bool get_show_relative_line_numbers ();
		public void set_show_line_changes (bool show_line_changes);
		public void set_show_line_diagnostics (bool show_line_diagnostics);
		public void set_show_line_numbers (bool show_line_numbers);
		public void set_show_relative_line_numbers (bool show_relative_line_numbers);
		[ConcreteAccessor]
		public abstract bool show_line_changes { get; set; }
		[ConcreteAccessor]
		public abstract bool show_line_diagnostics { get; set; }
		[ConcreteAccessor]
		public abstract bool show_line_numbers { get; set; }
		[ConcreteAccessor]
		public abstract bool show_relative_line_numbers { get; set; }
		[HasEmitter]
		public virtual signal void style_changed ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeHighlighterInterface", type_id = "ide_highlighter_get_type ()")]
	public interface Highlighter : Ide.Object {
		public abstract void load ();
		[NoWrapper]
		public abstract void set_engine (Ide.HighlightEngine engine);
		public abstract Gtk.TextIter update (GLib.SList<Gtk.TextTag> tags_to_remove, Ide.HighlightCallback callback, Gtk.TextIter range_begin, Gtk.TextIter range_end);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeOmniBarAddinInterface", type_id = "ide_omni_bar_addin_get_type ()")]
	public interface OmniBarAddin : GLib.Object {
		public abstract void load (Ide.OmniBar omni_bar);
		public abstract void unload (Ide.OmniBar omni_bar);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdePipelineAddinInterface", type_id = "ide_pipeline_addin_get_type ()")]
	public interface PipelineAddin : Ide.Object {
		public abstract void load (Ide.Pipeline pipeline);
		public abstract void prepare (Ide.Pipeline pipeline);
		public void track (uint stage_id);
		public abstract void unload (Ide.Pipeline pipeline);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeProjectTreeAddinInterface", type_id = "ide_project_tree_addin_get_type ()")]
	public interface ProjectTreeAddin : GLib.Object {
		public abstract void load (Ide.Tree tree);
		public abstract void unload (Ide.Tree tree);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeRenameProviderInterface", type_id = "ide_rename_provider_get_type ()")]
	public interface RenameProvider : Ide.Object {
		public abstract void load ();
		public abstract async bool rename_async (Ide.Location location, string new_name, GLib.Cancellable? cancellable, out GLib.GenericArray<Ide.TextEdit> edits) throws GLib.Error;
		public abstract void unload ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeRunCommandProviderInterface", type_id = "ide_run_command_provider_get_type ()")]
	public interface RunCommandProvider : Ide.Object {
		public void invalidate ();
		public void invalidates_at_phase (Ide.PipelinePhase phase);
		public abstract async GLib.ListModel list_commands_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public virtual signal void invalidated ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeRuntimeProviderInterface", type_id = "ide_runtime_provider_get_type ()")]
	public interface RuntimeProvider : Ide.Object {
		public abstract async Ide.Runtime bootstrap_async (Ide.Pipeline pipeline, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void load (Ide.RuntimeManager manager);
		public abstract bool provides (string runtime_id);
		public abstract void unload (Ide.RuntimeManager manager);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeSearchProviderInterface", type_id = "ide_search_provider_get_type ()")]
	public interface SearchProvider : Ide.Object {
		public abstract GLib.Icon? dup_icon ();
		public abstract string dup_title ();
		public abstract Ide.SearchCategory get_category ();
		public abstract void load ();
		public abstract async GLib.ListModel search_async (string query, uint max_results, GLib.Cancellable? cancellable, out bool truncated) throws GLib.Error;
		public abstract void unload ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeShortcutProviderInterface", type_id = "ide_shortcut_provider_get_type ()")]
	public interface ShortcutProvider : Ide.Object {
		public abstract GLib.ListModel list_shortcuts ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeSimilarFileLocatorInterface", type_id = "ide_similar_file_locator_get_type ()")]
	public interface SimilarFileLocator : GLib.Object {
		public abstract async GLib.ListModel list_async (GLib.File file, GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeSubprocessInterface", type_id = "ide_subprocess_get_type ()")]
	public interface Subprocess : GLib.Object {
		public bool check_exit_status () throws GLib.Error;
		public abstract bool communicate (GLib.Bytes stdin_buf, GLib.Cancellable? cancellable, GLib.Bytes stdout_buf, GLib.Bytes stderr_buf) throws GLib.Error;
		public abstract async bool communicate_async (GLib.Bytes? stdin_buf, GLib.Cancellable? cancellable, out GLib.Bytes stdout_buf, out GLib.Bytes stderr_buf) throws GLib.Error;
		public abstract bool communicate_utf8 (string? stdin_buf, GLib.Cancellable? cancellable, out string? stdout_buf, out string? stderr_buf) throws GLib.Error;
		public abstract async bool communicate_utf8_async (string? stdin_buf, GLib.Cancellable? cancellable, out string stdout_buf, out string stderr_buf) throws GLib.Error;
		public abstract void force_exit ();
		public abstract int get_exit_status ();
		public abstract unowned string get_identifier ();
		public abstract bool get_if_exited ();
		public abstract bool get_if_signaled ();
		public abstract int get_status ();
		public abstract unowned GLib.InputStream get_stderr_pipe ();
		public abstract unowned GLib.OutputStream get_stdin_pipe ();
		public abstract unowned GLib.InputStream get_stdout_pipe ();
		public abstract bool get_successful ();
		public abstract int get_term_sig ();
		public abstract void send_signal (int signal_num);
		public void send_signal_upon_cancel (GLib.Cancellable? cancellable, int signal_num);
		public abstract bool wait (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public abstract async bool wait_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool wait_check (GLib.Cancellable? cancellable = null) throws GLib.Error;
		public async bool wait_check_async (GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeSymbolResolverInterface", type_id = "ide_symbol_resolver_get_type ()")]
	public interface SymbolResolver : Ide.Object {
		public abstract async Ide.Symbol? find_nearest_scope_async (Ide.Location location, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract async GLib.GenericArray<Ide.Range> find_references_async (Ide.Location location, string? language_id, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract async Ide.SymbolTree? get_symbol_tree_async (GLib.File file, GLib.Bytes? contents, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void load ();
		public abstract async Ide.Symbol? lookup_symbol_async (Ide.Location location, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void unload ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeSymbolTreeInterface", type_id = "ide_symbol_tree_get_type ()")]
	public interface SymbolTree : GLib.Object {
		public abstract uint get_n_children (Ide.SymbolNode? node);
		public abstract Ide.SymbolNode? get_nth_child (Ide.SymbolNode? node, uint nth);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeTemplateProviderInterface", type_id = "ide_template_provider_get_type ()")]
	public interface TemplateProvider : GLib.Object {
		public abstract GLib.List<Ide.ProjectTemplate> get_project_templates ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeToolchainProviderInterface", type_id = "ide_toolchain_provider_get_type ()")]
	public interface ToolchainProvider : Ide.Object {
		public void emit_added (Ide.Toolchain toolchain);
		public void emit_removed (Ide.Toolchain toolchain);
		public abstract async bool load_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void unload (Ide.ToolchainManager manager);
		public virtual signal void added (Ide.Toolchain toolchain);
		public virtual signal void removed (Ide.Toolchain toolchain);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeTreeAddinInterface", type_id = "ide_tree_addin_get_type ()")]
	public interface TreeAddin : GLib.Object {
		[NoWrapper]
		public abstract void build_children (Ide.TreeNode node);
		public abstract async bool build_children_async (Ide.TreeNode node, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void build_node (Ide.TreeNode node);
		public abstract void load (Ide.Tree tree);
		public abstract bool node_activated (Ide.Tree tree, Ide.TreeNode node);
		public abstract void node_collapsed (Ide.TreeNode node);
		[Version (since = "44")]
		public abstract Gdk.ContentProvider? node_draggable (Ide.TreeNode node);
		public abstract async bool node_dropped_async (Gtk.DropTarget drop_target, Ide.TreeNode drop_node, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void node_expanded (Ide.TreeNode node);
		public abstract void selection_changed (Ide.TreeNode selection);
		public abstract void unload (Ide.Tree tree);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeVcsInterface", type_id = "ide_vcs_get_type ()")]
	public interface Vcs : Ide.Object {
		public void emit_changed ();
		public static unowned Ide.Vcs from_context (Ide.Context context);
		public abstract string get_branch_name ();
		public abstract Ide.VcsConfig? get_config ();
		public abstract string get_display_name ();
		public abstract int get_priority ();
		public abstract unowned GLib.File get_workdir ();
		public abstract bool is_ignored (GLib.File? file) throws GLib.Error;
		public abstract async GLib.GenericArray<Ide.VcsBranch> list_branches_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract async GLib.ListModel? list_status_async (GLib.File directory_or_file, bool include_descendants, int io_priority, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract async GLib.GenericArray<Ide.VcsBranch> list_tags_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public bool path_is_ignored (string? path) throws GLib.Error;
		public abstract async bool push_branch_async (Ide.VcsBranch branch, GLib.Cancellable? cancellable) throws GLib.Error;
		public static Ide.Vcs ref_from_context (Ide.Context context);
		public abstract async bool switch_branch_async (Ide.VcsBranch branch, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract string branch_name { owned get; }
		public abstract GLib.File workdir { get; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeVcsBranchInterface", type_id = "ide_vcs_branch_get_type ()")]
	public interface VcsBranch : GLib.Object {
		public string dup_id ();
		public string dup_name ();
		[NoAccessorMethod]
		public abstract string id { owned get; }
		[NoAccessorMethod]
		public abstract string name { owned get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeVcsClonerInterface", type_id = "ide_vcs_cloner_get_type ()")]
	public interface VcsCloner : Ide.Object {
		public abstract async bool clone_async (string uri, string destination, GLib.Variant options, Ide.Notification? progress, GLib.Cancellable? cancellable) throws GLib.Error;
		public static bool clone_simple (Ide.Context context, string module_name, string url, string branch, string destination, Ide.Notification notif, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public abstract string get_directory_name (Ide.VcsUri uri);
		public abstract string get_title ();
		public abstract async GLib.ListModel list_branches_async (Ide.VcsUri uri, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract bool validate_uri (string uri, out string errmsg);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeVcsConfigInterface", type_id = "ide_vcs_config_get_type ()")]
	public interface VcsConfig : Ide.Object {
		public abstract void get_config (Ide.VcsConfigType type, GLib.Value value);
		public abstract void set_config (Ide.VcsConfigType type, GLib.Value value);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeVcsInitializerInterface", type_id = "ide_vcs_initializer_get_type ()")]
	public interface VcsInitializer : Ide.Object {
		public abstract string get_title ();
		public abstract async bool initialize_async (GLib.File file, GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeVcsTagInterface", type_id = "ide_vcs_tag_get_type ()")]
	public interface VcsTag : GLib.Object {
		public abstract string dup_name ();
		[NoAccessorMethod]
		public abstract string name { owned get; }
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeWorkbenchAddinInterface", type_id = "ide_workbench_addin_get_type ()")]
	public interface WorkbenchAddin : GLib.Object {
		public abstract bool can_open (GLib.File file, string content_type, int priority);
		public abstract void load (Ide.Workbench workbench);
		public abstract async bool load_project_async (Ide.ProjectInfo project_info, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract async bool open_async (GLib.File file, string content_type, int at_line, int at_line_offset, Ide.BufferOpenFlags flags, Panel.Position position, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void project_loaded (Ide.ProjectInfo project_info);
		public abstract GLib.ActionGroup? ref_action_group ();
		public abstract void restore_session (Ide.Session session);
		public abstract void save_session (Ide.Session session);
		public abstract void unload (Ide.Workbench workbench);
		public abstract async bool unload_project_async (Ide.ProjectInfo project_info, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract void vcs_changed (Ide.Vcs? vcs);
		public abstract void workspace_added (Ide.Workspace workspace);
		public abstract void workspace_removed (Ide.Workspace workspace);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", type_cname = "IdeWorkspaceAddinInterface", type_id = "ide_workspace_addin_get_type ()")]
	public interface WorkspaceAddin : GLib.Object {
		public abstract void load (Ide.Workspace workspace);
		public abstract void page_changed (Ide.Page? page);
		public virtual GLib.ActionGroup? ref_action_group ();
		public virtual void restore_session (Ide.Session session);
		[NoWrapper]
		public virtual void restore_session_item (Ide.Session session, Ide.SessionItem item);
		public virtual void save_session (Ide.Session session);
		public abstract void unload (Ide.Workspace workspace);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	public struct Action {
		public void* next;
		public weak string name;
		public GLib.Type owner;
		public weak GLib.VariantType parameter_type;
		public weak GLib.VariantType state_type;
		public weak GLib.ParamSpec pspec;
		public weak Ide.ActionActivateFunc activate;
		public uint position;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	public struct ActionMixin {
		public weak GLib.ObjectClass object_class;
		public Ide.Action actions;
		public uint n_actions;
		public void constructed (void* instance);
		public void init (GLib.ObjectClass object_class);
		public static void set_enabled (void* instance, string action, bool enabled);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[SimpleType]
	public struct DebuggerAddress : uint64 {
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	public struct FileTransferStat {
		public int64 n_files_total;
		public int64 n_files;
		public int64 n_dirs_total;
		public int64 n_dirs;
		public int64 n_bytes_total;
		public int64 n_bytes;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	public struct FuzzyMutableIndexMatch {
		public weak string key;
		public void* value;
		public float score;
		public uint id;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	public struct LineReader {
		public weak string contents;
		public size_t length;
		public ssize_t pos;
		public void init (string contents, ssize_t length);
		public unowned string next (size_t length);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[SimpleType]
	public struct PtyFd : int {
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	public struct PtyIntercept {
		public size_t magic;
		public Ide.PtyInterceptSide consumer;
		public Ide.PtyInterceptSide producer;
		public void clear ();
		public static Ide.PtyFd create_consumer ();
		public static Ide.PtyFd create_producer (Ide.PtyFd consumer_fd, bool blocking);
		public Ide.PtyFd get_fd ();
		public bool init (Ide.PtyFd fd, GLib.MainContext? main_context);
		public void set_callback (Ide.PtyInterceptSide side, Ide.PtyInterceptCallback callback);
		public bool set_size (uint rows, uint columns);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	public struct PtyInterceptSide {
		public weak GLib.IOChannel channel;
		public uint in_watch;
		public uint out_watch;
		public int read_prio;
		public int write_prio;
		public weak GLib.Bytes out_bytes;
		public weak Ide.PtyInterceptCallback callback;
		public void* callback_data;
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_type_id = false)]
	public struct SearchReducer {
		public weak GLib.Sequence sequence;
		public size_t max_results;
		public size_t count;
		public bool accepts (float score);
		public void destroy ();
		public GLib.GenericArray<weak Ide.SearchResult>? free (bool free_results);
		public void init (size_t max_results);
		public void push (Ide.SearchResult result);
		public void take (owned Ide.SearchResult result);
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_ANIMATION_", type_id = "ide_animation_mode_get_type ()")]
	public enum AnimationMode {
		LINEAR,
		EASE_IN_QUAD,
		EASE_OUT_QUAD,
		EASE_IN_OUT_QUAD,
		EASE_IN_CUBIC,
		EASE_OUT_CUBIC,
		EASE_IN_OUT_CUBIC,
		LAST
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_ARTIFACT_KIND_", has_type_id = false)]
	public enum ArtifactKind {
		NONE,
		EXECUTABLE,
		SHARED_LIBRARY,
		STATIC_LIBRARY,
		FILE
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_BUFFER_LINE_CHANGE_", has_type_id = false)]
	[Flags]
	public enum BufferLineChange {
		NONE,
		ADDED,
		CHANGED,
		DELETED,
		PREVIOUS_DELETED
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_BUFFER_OPEN_FLAGS_", type_id = "ide_buffer_open_flags_get_type ()")]
	[Flags]
	public enum BufferOpenFlags {
		NONE,
		FORCE_RELOAD,
		DISABLE_ADDINS
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_BUFFER_STATE_", type_id = "ide_buffer_state_get_type ()")]
	public enum BufferState {
		READY,
		LOADING,
		SAVING,
		FAILED
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_BUILD_LOCALITY_", type_id = "ide_build_locality_get_type ()")]
	[Flags]
	public enum BuildLocality {
		IN_TREE,
		OUT_OF_TREE,
		DEFAULT
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_BUILD_LOG_", type_id = "ide_build_log_stream_get_type ()")]
	public enum BuildLogStream {
		STDOUT,
		STDERR
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_DEBUGGER_BREAK_", type_id = "ide_debugger_break_mode_get_type ()")]
	public enum DebuggerBreakMode {
		NONE,
		BREAKPOINT,
		COUNTPOINT,
		WATCHPOINT
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_DEBUGGER_BREAKPOINT_CHANGE_", type_id = "ide_debugger_breakpoint_change_get_type ()")]
	public enum DebuggerBreakpointChange {
		ENABLED
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_DEBUGGER_DISPOSITION_", type_id = "ide_debugger_disposition_get_type ()")]
	public enum DebuggerDisposition {
		KEEP,
		DISABLE,
		DELETE_NEXT_HIT,
		DELETE_NEXT_STOP
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_DEBUGGER_MOVEMENT_", type_id = "ide_debugger_movement_get_type ()")]
	public enum DebuggerMovement {
		START,
		CONTINUE,
		STEP_IN,
		STEP_OUT,
		FINISH
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_DEBUGGER_STOP_", type_id = "ide_debugger_stop_reason_get_type ()")]
	public enum DebuggerStopReason {
		BREAKPOINT_HIT,
		CATCH,
		[CCode (cname = "IDE_DEBUGGER_STOP_EXITED")]
		STOP_EXITED,
		EXITED_NORMALLY,
		EXITED_SIGNALED,
		FUNCTION_FINISHED,
		LOCATION_REACHED,
		SIGNAL_RECEIVED,
		UNKNOWN
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_DEBUGGER_", type_id = "ide_debugger_stream_get_type ()")]
	public enum DebuggerStream {
		CONSOLE,
		[CCode (cname = "IDE_DEBUGGER_EVENT_LOG")]
		LOG,
		TARGET
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_DEVICE_KIND_", type_id = "ide_device_kind_get_type ()")]
	public enum DeviceKind {
		COMPUTER,
		PHONE,
		TABLET,
		MICRO_CONTROLLER
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_DIAGNOSTIC_", type_id = "ide_diagnostic_severity_get_type ()")]
	public enum DiagnosticSeverity {
		IGNORED,
		NOTE,
		UNUSED,
		DEPRECATED,
		WARNING,
		ERROR,
		FATAL;
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_DOAP_ERROR_INVALID_", has_type_id = false)]
	public enum DoapError {
		[CCode (cname = "IDE_DOAP_ERROR_INVALID_FORMAT")]
		DOAP_ERROR_INVALID_FORMAT
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_FILE_TRANSFER_FLAGS_", has_type_id = false)]
	[Flags]
	public enum FileTransferFlags {
		NONE,
		MOVE
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_HEADER_BAR_POSITION_", has_type_id = false)]
	public enum HeaderBarPosition {
		LEFT,
		RIGHT,
		LEFT_OF_CENTER,
		RIGHT_OF_CENTER,
		LAST
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_HIGHLIGHT_", has_type_id = false)]
	public enum HighlightResult {
		STOP,
		CONTINUE
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_INDENT_STYLE_", type_id = "ide_indent_style_get_type ()")]
	public enum IndentStyle {
		SPACES,
		TABS
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_LSP_COMPLETION_", has_type_id = false)]
	public enum LspCompletionKind {
		TEXT,
		METHOD,
		FUNCTION,
		CONSTRUCTOR,
		FIELD,
		VARIABLE,
		CLASS,
		INTERFACE,
		MODULE,
		PROPERTY,
		UNIT,
		VALUE,
		ENUM,
		KEYWORD,
		SNIPPET,
		COLOR,
		FILE,
		REFERENCE,
		FOLDER,
		ENUM_MEMBER,
		CONSTANT,
		STRUCT,
		EVENT,
		OPERATOR,
		TYPE_PARAMETER
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_LSP_TRACE_", has_type_id = false)]
	public enum LspTrace {
		OFF,
		MESSAGES,
		VERBOSE
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_MARKED_KIND_", has_type_id = false)]
	public enum MarkedKind {
		PLAINTEXT,
		MARKDOWN,
		HTML,
		PANGO
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_OBJECT_", has_type_id = false)]
	public enum ObjectLocation {
		START,
		END,
		BEFORE_SIBLING,
		AFTER_SIBLING
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_PIPELINE_PHASE_", type_id = "ide_pipeline_phase_get_type ()")]
	[Flags]
	public enum PipelinePhase {
		NONE,
		PREPARE,
		DOWNLOADS,
		DEPENDENCIES,
		AUTOGEN,
		CONFIGURE,
		BUILD,
		INSTALL,
		COMMIT,
		EXPORT,
		FINAL,
		BEFORE,
		AFTER,
		FINISHED,
		FAILED
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_PROCESS_KIND_", has_type_id = false)]
	public enum ProcessKind {
		HOST,
		FLATPAK
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_RUN_COMMAND_KIND_", type_id = "ide_run_command_kind_get_type ()")]
	public enum RunCommandKind {
		UNKNOWN,
		APPLICATION,
		UTILITY,
		TEST,
		BENCHMARK,
		USER_DEFINED
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_SCRUBBER_REVEAL_POLICY_", type_id = "ide_scrubber_reveal_policy_get_type ()")]
	public enum ScrubberRevealPolicy {
		NEVER,
		AUTO,
		ALWAYS
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_SEARCH_CATEGORY_", type_id = "ide_search_category_get_type ()")]
	public enum SearchCategory {
		EVERYTHING,
		ACTIONS,
		COMMANDS,
		FILES,
		SYMBOLS,
		OTHER
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_SPACES_STYLE_", type_id = "ide_spaces_style_get_type ()")]
	[Flags]
	public enum SpacesStyle {
		IGNORE,
		BEFORE_LEFT_PAREN,
		BEFORE_LEFT_BRACKET,
		BEFORE_LEFT_BRACE,
		BEFORE_LEFT_ANGLE,
		BEFORE_COLON,
		BEFORE_COMMA,
		BEFORE_SEMICOLON
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_SYMBOL_FLAGS_", type_id = "ide_symbol_flags_get_type ()")]
	[Flags]
	public enum SymbolFlags {
		NONE,
		IS_STATIC,
		IS_MEMBER,
		IS_DEPRECATED,
		IS_DEFINITION
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_SYMBOL_KIND_", type_id = "ide_symbol_kind_get_type ()")]
	public enum SymbolKind {
		NONE,
		ALIAS,
		ARRAY,
		BOOLEAN,
		CLASS,
		CONSTANT,
		CONSTRUCTOR,
		ENUM,
		ENUM_VALUE,
		FIELD,
		FILE,
		FUNCTION,
		HEADER,
		INTERFACE,
		MACRO,
		METHOD,
		MODULE,
		NAMESPACE,
		NUMBER,
		PACKAGE,
		PROPERTY,
		SCALAR,
		STRING,
		STRUCT,
		TEMPLATE,
		UNION,
		VARIABLE,
		KEYWORD,
		UI_ATTRIBUTES,
		UI_CHILD,
		UI_ITEM,
		UI_MENU,
		UI_MENU_ATTRIBUTE,
		UI_OBJECT,
		UI_PACKING,
		UI_PROPERTY,
		UI_SECTION,
		UI_SIGNAL,
		UI_STYLE,
		UI_STYLE_CLASS,
		UI_SUBMENU,
		UI_TEMPLATE,
		XML_ATTRIBUTE,
		XML_DECLARATION,
		XML_ELEMENT,
		XML_COMMENT,
		XML_CDATA,
		OBJECT,
		EVENT,
		OPERATOR,
		TYPE_PARAM,
		LAST;
		public unowned GLib.Icon? get_gicon ();
		public unowned string get_icon_name ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_TASK_KIND_", has_type_id = false)]
	public enum TaskKind {
		DEFAULT,
		COMPILER,
		INDEXER,
		IO,
		LAST
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_TEMPLATE_INPUT_", has_type_id = false)]
	[Flags]
	public enum TemplateInputValidation {
		VALID,
		INVAL_NAME,
		INVAL_APP_ID,
		INVAL_LOCATION,
		INVAL_LANGUAGE,
		INVAL_TEMPLATE
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_TEST_STATUS_", type_id = "ide_test_status_get_type ()")]
	public enum TestStatus {
		NONE,
		RUNNING,
		SUCCESS,
		FAILED
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_THREAD_POOL_", has_type_id = false)]
	public enum ThreadPoolKind {
		DEFAULT,
		COMPILER,
		INDEXER,
		IO,
		LAST
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_TRANSFER_ERROR_", has_type_id = false)]
	public enum TransferError {
		UNKNOWN,
		CONNECTION_IS_METERED
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_TREE_NODE_FLAGS_", type_id = "ide_tree_node_flags_get_type ()")]
	[Flags]
	public enum TreeNodeFlags {
		NONE,
		DESCENDANT,
		ADDED,
		CHANGED,
		REMOVED
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_TREE_NODE_VISIT_", type_id = "ide_tree_node_visit_get_type ()")]
	public enum TreeNodeVisit {
		BREAK,
		CONTINUE,
		CHILDREN
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_TWEAKS_ITEM_VISIT_", has_type_id = false)]
	public enum TweaksItemVisitResult {
		STOP,
		CONTINUE,
		RECURSE,
		ACCEPT_AND_CONTINUE
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_VCS_CLONE_REQUEST_", has_type_id = false)]
	[Flags]
	public enum VcsCloneRequestValidation {
		VALID,
		INVAL_URI,
		INVAL_DIRECTORY,
		INVAL_EMAIL
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_VCS_CONFIG_", type_id = "ide_vcs_config_type_get_type ()")]
	public enum VcsConfigType {
		FULL_NAME,
		EMAIL
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_VCS_FILE_STATUS_", type_id = "ide_vcs_file_status_get_type ()")]
	public enum VcsFileStatus {
		IGNORED,
		UNCHANGED,
		UNTRACKED,
		ADDED,
		RENAMED,
		DELETED,
		CHANGED
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_BUILD_ERROR_", has_type_id = false)]
	public errordomain BuildError {
		UNKNOWN,
		BROKEN,
		NOT_LOADED,
		NEEDS_REBUILD;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_DEVICE_ERROR_NO_SUCH_", type_id = "ide_device_error_get_type ()")]
	public errordomain DeviceError {
		DEVICE;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cprefix = "IDE_RUNTIME_ERROR_", type_id = "ide_runtime_error_get_type ()")]
	public errordomain RuntimeError {
		UNKNOWN,
		NO_SUCH_RUNTIME,
		BUILD_FAILED,
		TARGET_NOT_FOUND,
		SPAWN_FAILED;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_target = false)]
	public delegate void ActionActivateFunc (void* instance, string action_name, GLib.Variant param);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 2.9)]
	public delegate void BufferChangeMonitorForeachFunc (uint line, Ide.BufferLineChange change);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 3.9)]
	public delegate void BufferCommitFunc (Ide.Buffer buffer, uint position, uint length);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 1.9)]
	public delegate void BufferForeachFunc (Ide.Buffer buffer);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 3.9)]
	public delegate void BuildLogObserver (Ide.BuildLogStream log_stream, string message, ssize_t message_len);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 2.9)]
	public delegate void DiagnosticsLineCallback (uint line, Ide.DiagnosticSeverity severity);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 3.9)]
	public delegate void ExtensionSetAdapterForeachFunc (Ide.ExtensionSetAdapter @set, Peas.PluginInfo plugin_info, Peas.Extension extension);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 2.9)]
	public delegate void FileWalkCallback (GLib.File directory, GLib.GenericArray<GLib.FileInfo> file_infos);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_target = false)]
	public delegate Ide.HighlightResult HighlightCallback (Gtk.TextIter begin, Gtk.TextIter end, string style_name);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 1.9)]
	public delegate void PageCallback (Ide.Page page);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 4.9)]
	public delegate void PtyInterceptCallback (Ide.PtyIntercept intercept, Ide.PtyInterceptSide side, uint8 data, size_t len);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 1.9)]
	public delegate bool RecursiveIgnoreFunc (GLib.File file);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 5.9)]
	public delegate bool RunContextHandler (Ide.RunContext run_context, string argv, string env, string cwd, Ide.UnixFDMap unix_fd_map) throws GLib.Error;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 1.9)]
	public delegate void ShortcutInfoFunc (Ide.ShortcutInfo info);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 3.9)]
	public delegate void TaskCacheCallback (Ide.TaskCache self, void* key, GLib.Task task);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_target = false)]
	public delegate void TaskThreadFunc (Ide.Task task, void* source_object, void* task_data, GLib.Cancellable? cancellable = null);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 2.9)]
	public delegate bool TextIterCharPredicate (Gtk.TextIter iter, unichar ch);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 0.9)]
	public delegate void ThreadFunc ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_target = false)]
	public delegate int TreeNodeCompare (Ide.TreeNode node, Ide.TreeNode child);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 1.9)]
	public delegate Ide.TreeNodeVisit TreeTraverseFunc (Ide.TreeNode node);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 2.9)]
	public delegate bool TweaksBindingTransform (GLib.Value from_value, GLib.Value to_value);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 1.9)]
	public delegate Ide.TweaksItemVisitResult TweaksItemVisitor (Ide.TweaksItem item);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", has_target = false)]
	public delegate void WidgetContextHandler (Gtk.Widget widget, Ide.Context context);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", instance_pos = 1.9)]
	public delegate void WorkspaceCallback (Ide.Workspace workspace);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_BUILD_CHANNEL")]
	public const string BUILD_CHANNEL;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_BUILD_IDENTIFIER")]
	public const string BUILD_IDENTIFIER;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_BUILD_TYPE")]
	public const string BUILD_TYPE;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_DEBUGGER_ADDRESS_INVALID")]
	public const int DEBUGGER_ADDRESS_INVALID;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_ENABLE_TRACE")]
	public const int ENABLE_TRACE;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_FILE_SETTINGS_EXTENSION_POINT")]
	public const string FILE_SETTINGS_EXTENSION_POINT;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_LINE_CHANGES_FALLBACK_ADDED")]
	public const string LINE_CHANGES_FALLBACK_ADDED;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_LINE_CHANGES_FALLBACK_CHANGED")]
	public const string LINE_CHANGES_FALLBACK_CHANGED;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_LINE_CHANGES_FALLBACK_REMOVED")]
	public const string LINE_CHANGES_FALLBACK_REMOVED;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_LSP_COMPLETION_PROVIDER_PRIORITY")]
	public const int LSP_COMPLETION_PROVIDER_PRIORITY;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_PIPELINE_PHASE_MASK")]
	public const int PIPELINE_PHASE_MASK;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_PIPELINE_PHASE_WHENCE_MASK")]
	public const int PIPELINE_PHASE_WHENCE_MASK;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_PTY_FD_INVALID")]
	public const int PTY_FD_INVALID;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_PTY_INTERCEPT_MAGIC")]
	public const int PTY_INTERCEPT_MAGIC;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_RECENT_PROJECTS_BOOKMARK_FILENAME")]
	public const string RECENT_PROJECTS_BOOKMARK_FILENAME;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_RECENT_PROJECTS_BUILD_SYSTEM_GROUP_PREFIX")]
	public const string RECENT_PROJECTS_BUILD_SYSTEM_GROUP_PREFIX;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_RECENT_PROJECTS_BUILD_SYSTEM_HINT_GROUP_PREFIX")]
	public const string RECENT_PROJECTS_BUILD_SYSTEM_HINT_GROUP_PREFIX;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_RECENT_PROJECTS_DIRECTORY")]
	public const string RECENT_PROJECTS_DIRECTORY;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_RECENT_PROJECTS_GROUP")]
	public const string RECENT_PROJECTS_GROUP;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_RECENT_PROJECTS_LANGUAGE_GROUP_PREFIX")]
	public const string RECENT_PROJECTS_LANGUAGE_GROUP_PREFIX;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_LANGUAGE_ANY")]
	public const string TOOLCHAIN_LANGUAGE_ANY;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_LANGUAGE_C")]
	public const string TOOLCHAIN_LANGUAGE_C;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_LANGUAGE_CPLUSPLUS")]
	public const string TOOLCHAIN_LANGUAGE_CPLUSPLUS;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_LANGUAGE_D")]
	public const string TOOLCHAIN_LANGUAGE_D;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_LANGUAGE_FORTRAN")]
	public const string TOOLCHAIN_LANGUAGE_FORTRAN;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_LANGUAGE_PYTHON")]
	public const string TOOLCHAIN_LANGUAGE_PYTHON;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_LANGUAGE_VALA")]
	public const string TOOLCHAIN_LANGUAGE_VALA;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_TOOL_AR")]
	public const string TOOLCHAIN_TOOL_AR;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_TOOL_CC")]
	public const string TOOLCHAIN_TOOL_CC;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_TOOL_CPP")]
	public const string TOOLCHAIN_TOOL_CPP;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_TOOL_EXEC")]
	public const string TOOLCHAIN_TOOL_EXEC;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_TOOL_LD")]
	public const string TOOLCHAIN_TOOL_LD;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_TOOL_PKG_CONFIG")]
	public const string TOOLCHAIN_TOOL_PKG_CONFIG;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TOOLCHAIN_TOOL_STRIP")]
	public const string TOOLCHAIN_TOOL_STRIP;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_TREE_NODE_FLAGS_VCS_MASK")]
	public const int TREE_NODE_FLAGS_VCS_MASK;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_VERSION")]
	public const double VERSION;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h", cname = "IDE_VERSION_S")]
	public const string VERSION_S;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "ActionMixin.set_enabled")]
	public static void action_mixin_set_enabled (void* instance, string action, bool enabled);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "BuildSystem.from_context")]
	public static unowned Ide.BuildSystem? build_system_from_context (Ide.Context context);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned GLib.Cancellable? cancellable_chain (GLib.Cancellable? self = null, GLib.Cancellable? other = null);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void clear_page (Ide.Page location);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void clear_pane (Ide.Pane location);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static GLib.Resource code_get_resource ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string create_host_triplet (string arch, string kernel, string system);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string create_project_id (string name);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "DeviceError.quark")]
	public static GLib.Quark device_error_quark ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "DiagnosticSeverity.to_string")]
	public static unowned string diagnostic_severity_to_string (Ide.DiagnosticSeverity severity);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static GLib.MenuModel editor_encoding_menu_new (string action_name);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void editor_file_chooser_add_encodings (Gtk.FileChooser chooser);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void editor_file_chooser_add_line_endings (Gtk.FileChooser chooser, GtkSource.NewlineType selected);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned GtkSource.Encoding editor_file_chooser_get_encoding (Gtk.FileChooser chooser);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static GtkSource.NewlineType editor_file_chooser_get_line_ending (Gtk.FileChooser chooser);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void editor_focus_buffer (Ide.Workspace workspace, Panel.Position position, Ide.Buffer buffer);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void editor_focus_location (Ide.Workspace workspace, Panel.Position position, Ide.Location location);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static GLib.Resource editor_get_resource ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static GLib.MenuModel editor_syntax_menu_new (string action_name);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool environ_parse (string pair, out string key, out string value);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "File.manager_show")]
	public static bool file_manager_show (GLib.File file) throws GLib.Error;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string? find_program_in_host_path (string program);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string font_description_to_css (Pango.FontDescription font_desc);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static int foundry_bytes_to_memfd (GLib.Bytes? bytes, string name);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static int foundry_file_to_memfd (GLib.File file, string name);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static Ide.SubprocessLauncher foundry_get_launcher_for_context (Ide.Context context, string program_name, string? bundled_program_path) throws GLib.Error;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string fuzzy_highlight (string str, string query, bool case_sensitive);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static GLib.Icon? g_content_type_get_symbolic_icon (string content_type, string filename);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string g_date_time_format_for_display (GLib.DateTime self);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void g_file_add_ignored_pattern (string pattern);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static async GLib.GenericArray<GLib.File> g_file_find_async (GLib.File file, string pattern, GLib.Cancellable? cancellable) throws GLib.Error;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static async GLib.File g_file_find_in_ancestors_async (GLib.File directory, string name, GLib.Cancellable? cancellable) throws GLib.Error;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static GLib.GenericArray<GLib.File> g_file_find_with_depth (GLib.File file, string pattern, uint max_depth, GLib.Cancellable? cancellable = null);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static async void g_file_find_with_depth_async (GLib.File file, string pattern, uint max_depth, GLib.Cancellable? cancellable);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static async GLib.GenericArray<GLib.FileInfo> g_file_get_children_async (GLib.File file, string attributes, GLib.FileQueryInfoFlags flags, int io_priority, GLib.Cancellable? cancellable) throws GLib.Error;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string? g_file_get_uncanonical_relative_path (GLib.File file, GLib.File other);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool g_file_is_ignored (GLib.File file);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void g_file_walk (GLib.File directory, string attributes, GLib.Cancellable? cancellable, Ide.FileWalkCallback callback);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void g_file_walk_with_ignore (GLib.File directory, string attributes, string? ignore_file, GLib.Cancellable? cancellable, Ide.FileWalkCallback callback);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool g_host_file_get_contents (string path, out string contents, out size_t len) throws GLib.Error;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string g_time_span_to_label (GLib.TimeSpan span);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned string get_application_id ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned GLib.Thread get_main_thread ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static Ide.ProcessKind get_process_kind ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned string get_program_name ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string get_projects_dir ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string get_relocatable_path (string path);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string get_system_arch ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static size_t get_system_page_size ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned string get_system_type ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned string get_user_default_path ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned string get_user_shell ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned string gettext (string message);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static GLib.Resource greeter_get_resource ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static GLib.Resource gtk_get_resource ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool gtk_list_view_get_selected_row (Gtk.ListView view, uint position);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void gtk_list_view_move_next (Gtk.ListView view);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void gtk_list_view_move_previous (Gtk.ListView view);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void gtk_progress_bar_start_pulsing (Gtk.ProgressBar progress);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void gtk_progress_bar_stop_pulsing (Gtk.ProgressBar progress);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool gtk_show_uri_on_window (Gtk.Window window, string uri, int64 timestamp) throws GLib.Error;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void gtk_widget_destroyed (Gtk.Widget widget, Gtk.Widget location);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void gtk_widget_hide_when_empty (Gtk.Widget widget, GLib.ListModel model);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void gtk_widget_hide_with_fade (Gtk.Widget widget);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void gtk_widget_show_with_fade (Gtk.Widget widget);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void gtk_window_present (Gtk.Window window);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string language_format_header (GtkSource.Language language, string header);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static int log_get_verbosity ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static Ide.SymbolKind lsp_decode_completion_kind (uint kind);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static Ide.SymbolKind lsp_decode_symbol_kind (uint kind);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static Ide.TextEdit? lsp_decode_text_edit (GLib.Variant text_edit, GLib.File gfile);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void lsp_plugin_register_types (Peas.ObjectModule object_module);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool panel_position_get_area (Panel.Position self, out Panel.Area? area);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool panel_position_get_column (Panel.Position self, out uint column);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool panel_position_get_depth (Panel.Position self, out uint depth);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool panel_position_get_row (Panel.Position self, out uint row);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string path_collapse (string path);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string path_expand (string path);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool path_is_c_like (string path);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool path_is_cpp_like (string path);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool path_is_ignored (string path);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "PtyIntercept.create_consumer")]
	public static Ide.PtyFd pty_intercept_create_consumer ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "PtyIntercept.create_producer")]
	public static Ide.PtyFd pty_intercept_create_producer (Ide.PtyFd consumer_fd, bool blocking);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static Vte.Pty pty_new_sync () throws GLib.Error;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "RuntimeError.quark")]
	public static GLib.Quark runtime_error_quark ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string search_path_append (string path, string append);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string search_path_prepend (string path, string prepend);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "SearchReducer.init")]
	public static void search_reducer_init (out Ide.SearchReducer reducer, size_t max_results);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void set_application_id (string app_id);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool shell_supports_dash_c (string shell);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool shell_supports_dash_login (string shell);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "ShortcutInfo.foreach")]
	public static void shortcut_info_foreach (GLib.ListModel shortcuts, Ide.ShortcutInfoFunc func);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void show_tweaks (Ide.Context context, string page);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool source_style_scheme_apply_style (GtkSource.StyleScheme style_scheme, string style, Gtk.TextTag tag);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned GtkSource.StyleScheme source_style_scheme_get_variant (GtkSource.StyleScheme scheme, string variant);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool source_style_scheme_is_dark (GtkSource.StyleScheme scheme);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static GLib.Resource sourceview_get_resource ();
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "SymbolKind.get_gicon")]
	public static unowned GLib.Icon? symbol_kind_get_gicon (Ide.SymbolKind kind);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "SymbolKind.get_icon_name")]
	public static unowned string symbol_kind_get_icon_name (Ide.SymbolKind kind);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_backward_WORD_end (Gtk.TextIter iter, bool newline_stop);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_backward_WORD_start (Gtk.TextIter iter, bool newline_stop);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_backward_find_char (Gtk.TextIter iter, [CCode (delegate_target_pos = 2.5)] Ide.TextIterCharPredicate pred, Gtk.TextIter limit);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_backward_paragraph_start (Gtk.TextIter iter);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_backward_sentence_start (Gtk.TextIter iter);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_backward_word_end (Gtk.TextIter iter, bool newline_stop);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_backward_word_start (Gtk.TextIter iter, bool newline_stop);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static string text_iter_current_symbol (Gtk.TextIter iter, Gtk.TextIter out_begin);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_find_chars_backward (Gtk.TextIter iter, Gtk.TextIter? limit, out unowned Gtk.TextIter? end, string str, bool only_at_start);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_find_chars_forward (Gtk.TextIter iter, Gtk.TextIter? limit, out unowned Gtk.TextIter? end, string str, bool only_at_start);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_forward_WORD_end (Gtk.TextIter iter, bool newline_stop);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_forward_WORD_start (Gtk.TextIter iter, bool newline_stop);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_forward_find_char (Gtk.TextIter iter, [CCode (delegate_target_pos = 2.5)] Ide.TextIterCharPredicate pred, Gtk.TextIter limit);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_forward_paragraph_end (Gtk.TextIter iter);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_forward_sentence_end (Gtk.TextIter iter);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_forward_word_end (Gtk.TextIter iter, bool newline_stop);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_forward_word_start (Gtk.TextIter iter, bool newline_stop);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static bool text_iter_in_string (Gtk.TextIter iter, string str, out Gtk.TextIter str_start, out Gtk.TextIter str_end, bool include_str_bounds);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void text_util_delete_line (Gtk.TextView text_view, int count);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static int text_util_int_to_string (uint value, string outstr);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void text_util_remove_common_prefix (Gtk.TextIter begin, string prefix);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "ThreadPool.push")]
	public static void thread_pool_push (Ide.ThreadPoolKind kind, [CCode (scope = "async")] Ide.ThreadFunc func);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "ThreadPool.push_task")]
	public static void thread_pool_push_task (Ide.ThreadPoolKind kind, GLib.Task task, [CCode (scope = "async")] GLib.TaskThreadFunc func);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "ThreadPool.push_with_priority")]
	public static void thread_pool_push_with_priority (Ide.ThreadPoolKind kind, int priority, [CCode (scope = "async")] Ide.ThreadFunc func);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void trace_function (string strfunc, int64 begin_time_usec, int64 end_time_usec);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "VcsCloner.clone_simple")]
	public static bool vcs_cloner_clone_simple (Ide.Context context, string module_name, string url, string branch, string destination, Ide.Notification notif, GLib.Cancellable? cancellable = null) throws GLib.Error;
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "Vcs.from_context")]
	public static unowned Ide.Vcs vcs_from_context (Ide.Context context);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "Vcs.ref_from_context")]
	public static Ide.Vcs vcs_ref_from_context (Ide.Context context);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	[Version (replacement = "VcsUri.is_valid")]
	public static bool vcs_uri_is_valid (string uri_string);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static int vte_pty_create_producer (Vte.Pty pty);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned Ide.Context? widget_get_context (Gtk.Widget widget);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned Ide.Workbench? widget_get_workbench (Gtk.Widget widget);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static unowned Ide.Workspace? widget_get_workspace (Gtk.Widget widget);
	[CCode (cheader_filename = "libide-code.h,libide-core.h,libide-debugger.h,libide-editor.h,libide-foundry.h,libide-greeter.h,libide-gtk.h,libide-gui.h,libide-io.h,libide-lsp.h,libide-plugins.h,libide-projects.h,libide-search.h,libide-sourceview.h,libide-terminal.h,libide-threading.h,libide-tree.h,libide-tweaks.h,libide-vcs.h,libide-webkit.h")]
	public static void widget_set_context_handler (Gtk.Widget widget, [CCode (scope = "async")] Ide.WidgetContextHandler handler);
}
